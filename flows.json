[
    {
        "id": "4e33cf5b03df07b7",
        "type": "tab",
        "label": "Hoang Lam",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "aeec0018a0fd818f",
        "type": "tab",
        "label": "Truong Binh",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bc72179531874d62",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#000000",
                "baseFont": "Lucida Sans Typewriter,Lucida Console,Monaco,monospace",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": true
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": true
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "4c5c83bbf054b470",
        "type": "ui_group",
        "name": "Current Feeding Schedule",
        "tab": "21050288c08ab01b",
        "order": 1,
        "disp": true,
        "width": "17",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0aaa3500562561ea",
        "type": "ui_group",
        "name": "Food Container",
        "tab": "8d66d040c5a991d1",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2f7ae1d9dbb40962",
        "type": "ui_group",
        "name": "Food Plate",
        "tab": "8d66d040c5a991d1",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "df7f1b0707f0384d",
        "type": "ui_group",
        "name": "Manual Feeding",
        "tab": "8d66d040c5a991d1",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "989a90dfdbfa79d0",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "77c1c2640f0c5d2f",
        "type": "ui_tab",
        "name": "Login",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "8d66d040c5a991d1",
        "type": "ui_tab",
        "name": "Home",
        "icon": "fa-home ",
        "order": 3,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "aa6de7dd52d2548b",
        "type": "ui_tab",
        "name": "Statistics",
        "icon": "fa-area-chart ",
        "order": 4,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "2d66c14763805337",
        "type": "ui_group",
        "name": "1-day Statistics",
        "tab": "aa6de7dd52d2548b",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "36a7cc5a3406a57d",
        "type": "ui_group",
        "name": "Test",
        "tab": "aa6de7dd52d2548b",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "72efe316941c7cdb",
        "type": "database-config",
        "name": "IoTUserData",
        "authType": "anonymous",
        "claims": {},
        "createUser": false,
        "useClaims": false
    },
    {
        "id": "9cbf2894d993b243",
        "type": "ui_tab",
        "name": "Register",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "3e45edafd7d05920",
        "type": "ui_group",
        "name": "Register",
        "tab": "9cbf2894d993b243",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "85358fcf49a28cef",
        "type": "ui_tab",
        "name": "Schedule",
        "icon": "schedule",
        "order": 5,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "9cfe263e84390285",
        "type": "ui_group",
        "name": "Schedule Feeding",
        "tab": "85358fcf49a28cef",
        "order": 1,
        "disp": true,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "885a9f12b26556e0",
        "type": "ui_group",
        "name": "Login",
        "tab": "77c1c2640f0c5d2f",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "21050288c08ab01b",
        "type": "ui_tab",
        "name": "Current Schedule",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "637316e70cc0ae71",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "ae2e27e210a4d6fb",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "df32f271c1b96b83",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "eea36066cebfae16",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "3c5c1269ce462641",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "2c3c34ef0bcf1bc5",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "620ba0aa613a6966",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "c22cc5b846131315",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "bebdc27ebc5fb413",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "60d1552b5cc4868e",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "9f9a39b2d85a923f",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 14,
        "width": 17,
        "height": 1
    },
    {
        "id": "0821b65f01d4f9fe",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 16,
        "width": 1,
        "height": 1
    },
    {
        "id": "dcf39bca6f4c9e41",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 18,
        "width": 1,
        "height": 1
    },
    {
        "id": "b61a3206496dfbb1",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "001a1a2d69447df4",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 21,
        "width": 1,
        "height": 1
    },
    {
        "id": "715b2db92828f81a",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 22,
        "width": 1,
        "height": 1
    },
    {
        "id": "4651af9084c43a58",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 23,
        "width": 1,
        "height": 1
    },
    {
        "id": "3b8c7b630195e91a",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 24,
        "width": 1,
        "height": 1
    },
    {
        "id": "0ee5cc1f4ea90732",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 25,
        "width": 1,
        "height": 1
    },
    {
        "id": "afd8409276210c5b",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 26,
        "width": 1,
        "height": 1
    },
    {
        "id": "48d435494858708e",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 27,
        "width": 1,
        "height": 1
    },
    {
        "id": "3af4b783a512e48e",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 28,
        "width": 17,
        "height": 1
    },
    {
        "id": "bee929f779157bba",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 29,
        "width": 6,
        "height": 1
    },
    {
        "id": "00d2d8f8abb5856b",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 31,
        "width": 6,
        "height": 1
    },
    {
        "id": "4a04e3ff6dabfca8",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 32,
        "width": 6,
        "height": 1
    },
    {
        "id": "1bd92616875ac273",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 33,
        "width": 6,
        "height": 1
    },
    {
        "id": "845742811fe35527",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 34,
        "width": 6,
        "height": 1
    },
    {
        "id": "0652c3c9214e4985",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 35,
        "width": 6,
        "height": 1
    },
    {
        "id": "4159284a3ff9b317",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 36,
        "width": 6,
        "height": 1
    },
    {
        "id": "273eda3281f98dd5",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 37,
        "width": 6,
        "height": 1
    },
    {
        "id": "043c178c3ce1e964",
        "type": "ui_spacer",
        "z": "aeec0018a0fd818f",
        "name": "spacer",
        "group": "9cfe263e84390285",
        "order": 8,
        "width": 6,
        "height": 1
    },
    {
        "id": "f88f581ac5998475",
        "type": "ui_form",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "label": "",
        "group": "885a9f12b26556e0",
        "order": 4,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": ""
        },
        "payload": "",
        "submit": "Login",
        "cancel": "",
        "topic": "user",
        "topicType": "str",
        "splitLayout": "",
        "className": "",
        "x": 90,
        "y": 1340,
        "wires": [
            [
                "8280567f9832043e",
                "517e791c12f1fc59"
            ]
        ]
    },
    {
        "id": "8169b665b118a2de",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Initialization",
        "func": "flow.set(\"amount\", 100)\nflow.set(\"plate_remain\", 0)\nflow.set(\"container_remain_percentage\", 0)\n\n// Flags for ifttt notification\nflow.set(\"noti_50\", true)\nflow.set(\"noti_20\", true)\nflow.set(\"noti_0\", true)\n\nmsg.payload = {\n    \"tabs\": {\n        \"show\": [\"Login\", \"Register\"]\n    },\n    \"tab\": \"Login\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1220,
        "wires": [
            [
                "0276ae555c7816ef"
            ]
        ]
    },
    {
        "id": "8395a0e079c6dac7",
        "type": "inject",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1220,
        "wires": [
            [
                "8169b665b118a2de"
            ]
        ]
    },
    {
        "id": "d22d0bea717884de",
        "type": "ui_gauge",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "group": "0aaa3500562561ea",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "donut",
        "title": "Percentage of food left",
        "label": "%",
        "format": "{{msg.payload.percentage}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 640,
        "y": 160,
        "wires": []
    },
    {
        "id": "dcd52f9e1bef9923",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Get and calculate container",
        "func": "// msg.payload: Loadcell's value (in gram)\nconst num = parseFloat(msg.payload.toFixed(2))\n// Fixed max weight = 5kg\nconst percentage = parseFloat((num / 5000 * 100).toFixed(2))\n\nmsg.payload = {\n    num: num,\n    percentage: percentage\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 160,
        "wires": [
            [
                "c5ff3f525649c12a",
                "d22d0bea717884de",
                "7687c49503fada7b",
                "81c8e9c1461f85b5"
            ]
        ]
    },
    {
        "id": "495c9f5fdc23ea97",
        "type": "ui_gauge",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "group": "2f7ae1d9dbb40962",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "donut",
        "title": "Percentage of food left",
        "label": "%",
        "format": "{{msg.payload.percentage}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 640,
        "y": 400,
        "wires": []
    },
    {
        "id": "d22e4e06348ea9eb",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Get and calculate plate",
        "func": "// msg.payload = Loadcell's value (in gram)\nconst num = parseFloat(msg.payload.toFixed(2))\n// Fixed max weight = 1kg\nconst percentage = parseFloat((num / 1000 * 100).toFixed(2))\n\nmsg.payload = {\n    num: num,\n    percentage: percentage\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 380,
        "wires": [
            [
                "495c9f5fdc23ea97",
                "7e221b30495e0e9a",
                "699a1a8eb52fc03c",
                "ee4eb3ce66309b54"
            ]
        ]
    },
    {
        "id": "c5ff3f525649c12a",
        "type": "ui_text",
        "z": "4e33cf5b03df07b7",
        "group": "0aaa3500562561ea",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Weight: ",
        "format": "{{msg.payload.num}} g",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 620,
        "y": 100,
        "wires": []
    },
    {
        "id": "7e221b30495e0e9a",
        "type": "ui_text",
        "z": "4e33cf5b03df07b7",
        "group": "2f7ae1d9dbb40962",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Weight:",
        "format": "{{msg.payload.num}} g",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 600,
        "y": 340,
        "wires": []
    },
    {
        "id": "6e13e38dc43c982c",
        "type": "ui_button",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "group": "df7f1b0707f0384d",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Feed Now",
        "tooltip": "Press this button to feed your pet immediately without schedules",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 760,
        "wires": [
            [
                "b0a9b67963bd14e5"
            ]
        ]
    },
    {
        "id": "c98f399bb17e8f02",
        "type": "ui_numeric",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "label": "Food amount:",
        "tooltip": "",
        "group": "df7f1b0707f0384d",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}} g",
        "min": "100",
        "max": "1000",
        "step": "100",
        "className": "",
        "x": 120,
        "y": 700,
        "wires": [
            [
                "b2569f4701ca23b2"
            ]
        ]
    },
    {
        "id": "b2569f4701ca23b2",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "function 5",
        "func": "flow.set(\"amount\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "b0a9b67963bd14e5",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "function 6",
        "func": "const container_remain = flow.get(\"container_remain\")\nconst plate_remain = flow.get(\"plate_remain\")\nconst amount_to_feed = flow.get(\"amount\")\n\nif(container_remain < amount_to_feed){\n    msg.payload = {\n        failure: \"Your food container doesn't have enough food!\"\n    }\n}\nelse if(1000 - plate_remain < amount_to_feed){\n    msg.payload = {\n        failure: \"Your plate can't hold that much food!\"\n    }\n}\nelse{\n    msg.payload = {\n        success: \"Preparing to feed your pet!\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 760,
        "wires": [
            [
                "d913b739e05a0f01"
            ]
        ]
    },
    {
        "id": "d9a11770263a5b8f",
        "type": "ui_toast",
        "z": "4e33cf5b03df07b7",
        "position": "bottom right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Success notification",
        "x": 780,
        "y": 800,
        "wires": []
    },
    {
        "id": "d913b739e05a0f01",
        "type": "switch",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "failure",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "success",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 760,
        "wires": [
            [
                "d90b67f3a78daa43"
            ],
            [
                "aea7fc9cd9582cc2"
            ]
        ]
    },
    {
        "id": "aea7fc9cd9582cc2",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "function 7",
        "func": "const message = msg.payload.success\nmsg.payload = message\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 800,
        "wires": [
            [
                "d9a11770263a5b8f",
                "64aae4a760f7434c"
            ]
        ]
    },
    {
        "id": "2d7190b6b4495016",
        "type": "ui_toast",
        "z": "4e33cf5b03df07b7",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Failure notification",
        "x": 770,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "d90b67f3a78daa43",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "function 8",
        "func": "const message = msg.payload.failure\nmsg.payload = message\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 740,
        "wires": [
            [
                "2d7190b6b4495016"
            ]
        ]
    },
    {
        "id": "7b29ab85e7fb169b",
        "type": "ui_text",
        "z": "4e33cf5b03df07b7",
        "group": "2f7ae1d9dbb40962",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Your pet has eaten:",
        "format": "{{msg.payload}} g",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1850,
        "y": 400,
        "wires": []
    },
    {
        "id": "5bfc67003b294122",
        "type": "mqtt in",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "topic": "/scale/container",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "989a90dfdbfa79d0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 160,
        "wires": [
            [
                "dcd52f9e1bef9923",
                "8ea0fb3c9a9b5dea"
            ]
        ]
    },
    {
        "id": "8ea0fb3c9a9b5dea",
        "type": "debug",
        "z": "4e33cf5b03df07b7",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 220,
        "wires": []
    },
    {
        "id": "95ca86d510117746",
        "type": "mqtt out",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "topic": "/servo",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "989a90dfdbfa79d0",
        "x": 890,
        "y": 860,
        "wires": []
    },
    {
        "id": "64aae4a760f7434c",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "function 9",
        "func": "msg.payload = flow.get(\"amount\")\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 860,
        "wires": [
            [
                "95ca86d510117746"
            ]
        ]
    },
    {
        "id": "f4085065019e016e",
        "type": "mqtt in",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "topic": "/scale/plate",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "989a90dfdbfa79d0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 380,
        "wires": [
            [
                "d22e4e06348ea9eb",
                "237adfda58901736"
            ]
        ]
    },
    {
        "id": "237adfda58901736",
        "type": "debug",
        "z": "4e33cf5b03df07b7",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 440,
        "wires": []
    },
    {
        "id": "0276ae555c7816ef",
        "type": "ui_ui_control",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "events": "all",
        "x": 1060,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "48a3509801002536",
        "type": "switch",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "success",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "failure",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 1400,
        "wires": [
            [
                "edb804e870cda75d",
                "a8d2c71182990e26"
            ],
            [
                "82157cbfb0f35f35"
            ]
        ]
    },
    {
        "id": "edb804e870cda75d",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Login success",
        "func": "msg.payload = msg.payload.success\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1360,
        "wires": [
            [
                "769f2fa6da097d7a"
            ]
        ]
    },
    {
        "id": "82157cbfb0f35f35",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Login failure",
        "func": "msg.payload = msg.payload.failure\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1440,
        "wires": [
            [
                "769f2fa6da097d7a"
            ]
        ]
    },
    {
        "id": "769f2fa6da097d7a",
        "type": "ui_toast",
        "z": "4e33cf5b03df07b7",
        "position": "bottom right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Notification",
        "name": "",
        "x": 1110,
        "y": 1400,
        "wires": []
    },
    {
        "id": "717b41429cf5cb6e",
        "type": "inject",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 960,
        "wires": [
            [
                "d28c6b7671faf408"
            ]
        ]
    },
    {
        "id": "d28c6b7671faf408",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "function 12",
        "func": "msg.payload = Math.round(Math.random()*100)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 960,
        "wires": [
            [
                "81613fc758af82ec"
            ]
        ]
    },
    {
        "id": "81613fc758af82ec",
        "type": "http request",
        "z": "4e33cf5b03df07b7",
        "name": "Send data to Thingspeak",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/update?api_key=XRSGUUMCOGOTT89V&field1={{payload}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 960,
        "wires": [
            [
                "d02859b807e211ac"
            ]
        ]
    },
    {
        "id": "d02859b807e211ac",
        "type": "debug",
        "z": "4e33cf5b03df07b7",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 960,
        "wires": []
    },
    {
        "id": "e711454291b72ee1",
        "type": "inject",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1020,
        "wires": [
            [
                "fd3b237d3da5d8bc"
            ]
        ]
    },
    {
        "id": "fd3b237d3da5d8bc",
        "type": "http request",
        "z": "4e33cf5b03df07b7",
        "name": "Get data from Thingspeak",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2372088/fields/1.json?api_key=KYAW97ZDGX7CCNPF&days=1&timezone=Asia%2FBangkok",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 310,
        "y": 1020,
        "wires": [
            [
                "f38e21b04b9d91d1"
            ]
        ]
    },
    {
        "id": "f38e21b04b9d91d1",
        "type": "json",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 1020,
        "wires": [
            [
                "38cd8b1ea7fd2ad6",
                "c190d8948465e7ef"
            ]
        ]
    },
    {
        "id": "6671977241289c68",
        "type": "comment",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "info": "Dữ liệu theo ngày, tuần, tháng phụ thuộc rất nhiều vào cái query của http request\nXem docs để tìm cách lấy dữ liệu\nhttps://www.mathworks.com/help/thingspeak/readfield.html",
        "x": 100,
        "y": 1060,
        "wires": []
    },
    {
        "id": "38cd8b1ea7fd2ad6",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "function 13",
        "func": "const entries = msg.payload.feeds\n\nconst data = entries.map((entry) => {\n    return parseFloat(entry.field1)\n})\n\nconst labels = entries.map((entry) => {\n    return entry.created_at.substr(11,8)\n})\n\nmsg.payload = [{\n    \"series\": [\"Amount\"],\n    \"data\": [[...data]],\n    \"labels\": [...labels]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1020,
        "wires": [
            [
                "3325a89e7c6f0bcc"
            ]
        ]
    },
    {
        "id": "3325a89e7c6f0bcc",
        "type": "ui_chart",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "group": "36a7cc5a3406a57d",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "7687c49503fada7b",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Check percentage for notification",
        "func": "const old_percentage = flow.get(\"container_remain_percentage\")\n\nconst new_percentage = msg.payload.percentage\n\n// If the amount of food drops\nif(new_percentage < old_percentage){\n    if(new_percentage <= 50){\n        if(flow.get(\"noti_50\") === false){\n            msg.payload = {\n                notif: \"Your food container is below 50%\"\n            }\n            flow.set(\"noti_50\", true)\n        }\n    }\n    if (new_percentage <= 20) {\n        if(flow.get(\"noti_20\") === false){\n            msg.payload = {\n                notif: \"Your food container is below 20%\"\n            }\n            flow.set(\"noti_20\", true)\n        }\n    }\n    if (new_percentage == 0) {\n        if(flow.get(\"noti_0\") === false){\n            msg.payload = {\n                notif: \"Your food container is empty, go back and fill it!!!\"\n            }\n            flow.set(\"noti_0\", true)\n        }\n    }\n}\nelse{\n    if(new_percentage > 0){\n        if(flow.get(\"noti_0\") === true){\n            flow.set(\"noti_0\", false)\n        }\n    }\n    if(new_percentage > 20){\n        if(flow.get(\"noti_20\") === true){\n            flow.set(\"noti_20\", false)\n        }\n    }\n    if(new_percentage > 50){\n        if(flow.get(\"noti_50\") === true){\n            flow.set(\"noti_50\", false)\n        }\n    }\n}\n\nflow.set(\"container_remain_percentage\", new_percentage)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 40,
        "wires": [
            [
                "6bbda94cbc0da7c8"
            ]
        ]
    },
    {
        "id": "6bbda94cbc0da7c8",
        "type": "switch",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "notif",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 890,
        "y": 40,
        "wires": [
            [
                "a6b4eacad1f3eccc",
                "884f8794932efe34"
            ]
        ]
    },
    {
        "id": "a6b4eacad1f3eccc",
        "type": "debug",
        "z": "4e33cf5b03df07b7",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 100,
        "wires": []
    },
    {
        "id": "0c83e3fe65bcf9b4",
        "type": "http request",
        "z": "4e33cf5b03df07b7",
        "name": "Send notification",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "https://maker.ifttt.com/trigger/food_container/with/key/p2uFc04S-wZa--ullRaUbLBoZWcztXBX7qcMNV5fn__",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1370,
        "y": 40,
        "wires": [
            [
                "a51573641188c93a"
            ]
        ]
    },
    {
        "id": "a51573641188c93a",
        "type": "debug",
        "z": "4e33cf5b03df07b7",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 40,
        "wires": []
    },
    {
        "id": "884f8794932efe34",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Parse notif into value1 for IFTTT",
        "func": "msg.payload = {\n    \"value1\": msg.payload.notif\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 40,
        "wires": [
            [
                "0c83e3fe65bcf9b4"
            ]
        ]
    },
    {
        "id": "38d1fcab04597717",
        "type": "inject",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 900,
        "wires": [
            [
                "0e46fcf781dbe7bc"
            ]
        ]
    },
    {
        "id": "0e46fcf781dbe7bc",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "function 14",
        "func": "msg.payload = {\n    \"test1\": \"abc\",\n    \"test2\": 123,\n    \"test3\": [1, 2, 3]\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 900,
        "wires": [
            [
                "037c6fb42945bd3a"
            ]
        ]
    },
    {
        "id": "037c6fb42945bd3a",
        "type": "mqtt out",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "topic": "/test/meo",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "989a90dfdbfa79d0",
        "x": 440,
        "y": 900,
        "wires": []
    },
    {
        "id": "81c8e9c1461f85b5",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Prepare data to push to Thingspeak",
        "func": "msg.payload = msg.payload.percentage\nmsg.topic = \"field2\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 220,
        "wires": [
            [
                "c21c625339ddd774"
            ]
        ]
    },
    {
        "id": "36f3138f904c8071",
        "type": "http request",
        "z": "4e33cf5b03df07b7",
        "name": "Get data from Thingspeak",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2372088/feeds.json?api_key=KYAW97ZDGX7CCNPF&days=1&timezone=Asia%2FBangkok",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1270,
        "y": 280,
        "wires": [
            [
                "ec03ddc07cf120f5"
            ]
        ]
    },
    {
        "id": "ec03ddc07cf120f5",
        "type": "json",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1470,
        "y": 280,
        "wires": [
            [
                "bb9498e45dbe4985",
                "1a7316d30b5aec39",
                "3c645cb9011540a0",
                "89b2e8ecbed2d71a"
            ]
        ]
    },
    {
        "id": "1a7316d30b5aec39",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Parse data",
        "func": "const entries = msg.payload.feeds\n\nconst data = entries.map((entry) => {\n    return parseFloat(entry.field2)\n})\n\nconst labels = entries.map((entry) => {\n    return entry.created_at.substr(11,8)\n})\n\nmsg.payload = [{\n    \"series\": [\"Amount\"],\n    \"data\": [[...data]],\n    \"labels\": [...labels]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 220,
        "wires": [
            [
                "1ee1fa6c5a491d26"
            ]
        ]
    },
    {
        "id": "1ee1fa6c5a491d26",
        "type": "ui_chart",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "group": "2d66c14763805337",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Food Container",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "monotone",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1840,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "699a1a8eb52fc03c",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Prepare plate's percentage to push to Thingspeak",
        "func": "msg.payload = msg.payload.percentage\nmsg.topic = \"field3\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 460,
        "wires": [
            [
                "c21c625339ddd774"
            ]
        ]
    },
    {
        "id": "3c645cb9011540a0",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Parse data",
        "func": "const entries = msg.payload.feeds\n\nconst data = entries.map((entry) => {\n    return parseFloat(entry.field3)\n})\n\nconst labels = entries.map((entry) => {\n    return entry.created_at.substr(11,8)\n})\n\nmsg.payload = [{\n    \"series\": [\"Amount\"],\n    \"data\": [[...data]],\n    \"labels\": [...labels]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 280,
        "wires": [
            [
                "ef31e8059bed94c9"
            ]
        ]
    },
    {
        "id": "ef31e8059bed94c9",
        "type": "ui_chart",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "group": "2d66c14763805337",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Food Plate",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "monotone",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1830,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "ee4eb3ce66309b54",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Prepare pet's eaten amount to send to Thingspeak",
        "func": "const old_plate_remain = flow.get(\"plate_remain\")\n\nconst current_plate_remain = msg.payload.num\n\nif(current_plate_remain < old_plate_remain){\n    msg.payload = old_plate_remain - current_plate_remain\n}\nelse{\n    msg.payload = 0\n}\nmsg.topic = \"field4\"\n\nflow.set(\"plate_remain\", current_plate_remain)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 580,
        "wires": [
            [
                "c21c625339ddd774"
            ]
        ]
    },
    {
        "id": "89b2e8ecbed2d71a",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Parse data",
        "func": "const entries = msg.payload.feeds\n\nconst data = entries.map((entry) => {\n    if (!isNaN(parseFloat(entry.field4))){\n        return parseFloat(entry.field4)\n    }\n    else{\n        return 0\n    }\n})\n\nconst labels = entries.map((entry) => {\n    return entry.created_at.substr(11,8)\n})\n\nmsg.payload = [{\n    \"series\": [\"Amount\"],\n    \"data\": [[...data]],\n    \"labels\": [...labels]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 340,
        "wires": [
            [
                "51aa8e1b60ce15cc"
            ]
        ]
    },
    {
        "id": "51aa8e1b60ce15cc",
        "type": "ui_chart",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "group": "2d66c14763805337",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Eaten Amount",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1840,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "28f08f9ec96b54c7",
        "type": "http request",
        "z": "4e33cf5b03df07b7",
        "name": "Send data to Thingspeak",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/update?api_key=XRSGUUMCOGOTT89V",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1410,
        "y": 460,
        "wires": [
            [
                "265859fb699b164c"
            ]
        ]
    },
    {
        "id": "265859fb699b164c",
        "type": "debug",
        "z": "4e33cf5b03df07b7",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 460,
        "wires": []
    },
    {
        "id": "c21c625339ddd774",
        "type": "join",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1050,
        "y": 460,
        "wires": [
            [
                "8a64ecded4d9bda1"
            ]
        ]
    },
    {
        "id": "8a64ecded4d9bda1",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Filter",
        "func": "if (msg.payload.field4 === 0){\n    delete msg.payload.field4;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 460,
        "wires": [
            [
                "9c7a1ab8bc7961da",
                "28f08f9ec96b54c7"
            ]
        ]
    },
    {
        "id": "9c7a1ab8bc7961da",
        "type": "debug",
        "z": "4e33cf5b03df07b7",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 520,
        "wires": []
    },
    {
        "id": "c190d8948465e7ef",
        "type": "debug",
        "z": "4e33cf5b03df07b7",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 1080,
        "wires": []
    },
    {
        "id": "df0219eb05b01752",
        "type": "inject",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1070,
        "y": 280,
        "wires": [
            [
                "36f3138f904c8071",
                "ede85b7053eb2095"
            ]
        ]
    },
    {
        "id": "bb9498e45dbe4985",
        "type": "debug",
        "z": "4e33cf5b03df07b7",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 160,
        "wires": []
    },
    {
        "id": "8280567f9832043e",
        "type": "firebase-get",
        "z": "4e33cf5b03df07b7",
        "name": "Search account",
        "constraint": {
            "orderByChild": "username",
            "equalTo": {
                "value": "payload.username",
                "type": "msg"
            }
        },
        "database": "72efe316941c7cdb",
        "outputType": "auto",
        "passThrough": false,
        "path": "accounts",
        "pathType": "str",
        "useConstraint": true,
        "x": 280,
        "y": 1340,
        "wires": [
            [
                "2b444dd87f998fa5"
            ]
        ]
    },
    {
        "id": "2b444dd87f998fa5",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Check for account's existence",
        "func": "const data = msg.payload\n\nif(data === null){\n    msg.payload = \"Wrong account/password\"\n    msg.topic = \"failure\"\n}\n\nfor (const key in data){\n    if(data.hasOwnProperty(key)){\n        msg.payload = data[key].password\n        msg.topic = \"get_password\"\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1400,
        "wires": [
            [
                "517e791c12f1fc59"
            ]
        ]
    },
    {
        "id": "517e791c12f1fc59",
        "type": "join",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 290,
        "y": 1460,
        "wires": [
            [
                "9857fe181c80c371"
            ]
        ]
    },
    {
        "id": "9857fe181c80c371",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Check password",
        "func": "const data = msg.payload\n\nif(data.hasOwnProperty(\"failure\")){\n    msg.payload = {\n        failure: \"Wrong account/password\"\n    }\n}\nelse{\n    if(data.user.password === data.get_password){\n        msg.payload = {\n        success: \"Login completed\"\n        }\n    }\n    else{\n        msg.payload = {\n            failure: \"Wrong account/password\"\n        }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1460,
        "wires": [
            [
                "48a3509801002536"
            ]
        ]
    },
    {
        "id": "a8d2c71182990e26",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Login complete",
        "func": "msg.payload = {\n    \"tabs\": {\n        \"show\": [\"Home\", \"Statistics\", \"Schedule\",\"Current Schedule\"],\n        \"hide\": [\"Login\", \"Register\"]\n    },\n    \"tab\": \"Home\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1300,
        "wires": [
            [
                "0276ae555c7816ef"
            ]
        ]
    },
    {
        "id": "2e99e5520e56cdf6",
        "type": "ui_form",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "label": "",
        "group": "3e45edafd7d05920",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": ""
        },
        "payload": "",
        "submit": "Register",
        "cancel": "",
        "topic": "user",
        "topicType": "str",
        "splitLayout": "",
        "className": "",
        "x": 90,
        "y": 1540,
        "wires": [
            [
                "59f0231a9d1aea72",
                "70a2155321f2db59"
            ]
        ]
    },
    {
        "id": "22d9530633e40858",
        "type": "firebase-out",
        "z": "4e33cf5b03df07b7",
        "name": "Add account",
        "database": "72efe316941c7cdb",
        "path": "accounts",
        "pathType": "str",
        "priority": 1,
        "queryType": "push",
        "x": 910,
        "y": 1760,
        "wires": []
    },
    {
        "id": "59f0231a9d1aea72",
        "type": "firebase-get",
        "z": "4e33cf5b03df07b7",
        "name": "Search account",
        "constraint": {
            "orderByChild": "username",
            "equalTo": {
                "value": "payload.username",
                "type": "msg"
            }
        },
        "database": "72efe316941c7cdb",
        "outputType": "auto",
        "passThrough": false,
        "path": "accounts",
        "pathType": "str",
        "useConstraint": true,
        "x": 260,
        "y": 1540,
        "wires": [
            [
                "4824b1a9c410ce52"
            ]
        ]
    },
    {
        "id": "4824b1a9c410ce52",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Check username duplication",
        "func": "const data = msg.payload;\n\nif(data !== null){\n    msg.payload = \"Account has already existed\"\n    msg.topic = \"failure\"\n}\nelse{\n    msg.payload = \"Successfully created an account\"\n    msg.topic = \"success\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1540,
        "wires": [
            [
                "70a2155321f2db59"
            ]
        ]
    },
    {
        "id": "70a2155321f2db59",
        "type": "join",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 290,
        "y": 1600,
        "wires": [
            [
                "c855bbf0c3b77670"
            ]
        ]
    },
    {
        "id": "c855bbf0c3b77670",
        "type": "switch",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "failure",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "success",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 1600,
        "wires": [
            [
                "11551ac7f14a1acb"
            ],
            [
                "7e3cdb60716a359e",
                "dd9197210faeb8bd",
                "fa1c65ee8428c565"
            ]
        ]
    },
    {
        "id": "7e3cdb60716a359e",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Get input account",
        "func": "msg.payload = msg.payload.user\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1760,
        "wires": [
            [
                "22d9530633e40858"
            ]
        ]
    },
    {
        "id": "dd9197210faeb8bd",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Create account success message",
        "func": "msg.payload = msg.payload.success\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1640,
        "wires": [
            [
                "769f2fa6da097d7a"
            ]
        ]
    },
    {
        "id": "11551ac7f14a1acb",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Create account failure message",
        "func": "msg.payload = msg.payload.failure\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1580,
        "wires": [
            [
                "769f2fa6da097d7a"
            ]
        ]
    },
    {
        "id": "fa1c65ee8428c565",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Navigate to Login",
        "func": "msg.payload = {\n    \"tab\": \"Login\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1700,
        "wires": [
            [
                "172028c25264dc5a"
            ]
        ]
    },
    {
        "id": "172028c25264dc5a",
        "type": "ui_ui_control",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "events": "all",
        "x": 1080,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "9202be20442468f5",
        "type": "comment",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "info": "Cứ 30s lấy data 1 lần",
        "x": 1040,
        "y": 240,
        "wires": []
    },
    {
        "id": "506b25f89a3b344f",
        "type": "comment",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "info": "Gửi dữ liệu từ ESP qua đây bằng MQTT nên\ndelay cỡ 15-20s do Thingspeak hàng free\nkhông cho push data nhanh",
        "x": 100,
        "y": 100,
        "wires": []
    },
    {
        "id": "ede85b7053eb2095",
        "type": "http request",
        "z": "4e33cf5b03df07b7",
        "name": "Get eaten amount in a day",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2372088/fields/4.json?api_key=KYAW97ZDGX7CCNPF&days=1&timezone=Asia%2FBangkok&sum=daily",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1280,
        "y": 400,
        "wires": [
            [
                "2b18254721c5aedd"
            ]
        ]
    },
    {
        "id": "2b18254721c5aedd",
        "type": "json",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1490,
        "y": 400,
        "wires": [
            [
                "499168c72ef87a70"
            ]
        ]
    },
    {
        "id": "499168c72ef87a70",
        "type": "function",
        "z": "4e33cf5b03df07b7",
        "name": "Parse data",
        "func": "const entries = msg.payload.feeds\n\nmsg.payload = entries[entries.length -1].field4\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 400,
        "wires": [
            [
                "7b29ab85e7fb169b"
            ]
        ]
    },
    {
        "id": "d22c05803bf54876",
        "type": "comment",
        "z": "4e33cf5b03df07b7",
        "name": "",
        "info": "Login với Register dùng firebase, không\nhash password",
        "x": 100,
        "y": 1280,
        "wires": []
    },
    {
        "id": "8149ca277796e094",
        "type": "ui_form",
        "z": "aeec0018a0fd818f",
        "name": "",
        "label": "Monday",
        "group": "9cfe263e84390285",
        "order": 1,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "Meal 1",
                "value": "meal_1",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_1",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 2",
                "value": "meal_2",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_2",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 3",
                "value": "meal_3",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_3",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "meal_1": "",
            "amount_1": "",
            "meal_2": "",
            "amount_2": "",
            "meal_3": "",
            "amount_3": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 100,
        "y": 100,
        "wires": [
            [
                "31e65e57f289e979"
            ]
        ]
    },
    {
        "id": "b1f196ebe376ee79",
        "type": "ui_form",
        "z": "aeec0018a0fd818f",
        "name": "",
        "label": "Tuesday",
        "group": "9cfe263e84390285",
        "order": 2,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "Meal 1",
                "value": "meal_1",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_1",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 2",
                "value": "meal_2",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_2",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 3",
                "value": "meal_3",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_3",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "meal_1": "",
            "amount_1": "",
            "meal_2": "",
            "amount_2": "",
            "meal_3": "",
            "amount_3": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 100,
        "y": 140,
        "wires": [
            [
                "502b93f466bfbd46"
            ]
        ]
    },
    {
        "id": "502b93f466bfbd46",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "parse data",
        "func": "const day = \"Tue\"\nconst time = []\nconst quantity = []\nfor (let i = 1; i <= 3; i++) {\n    const mealKey = `meal_${i}`;\n    const amountKey = `amount_${i}`;\n    const mealValue = msg.payload[mealKey];\n    const amountValue = msg.payload[amountKey];\n\n    if (mealValue !== null && amountValue !== null) {\n        // Parse thời gian để chỉ lấy giờ và phút\n        const parsedTime = new Date(mealValue);\n        const formattedTime = `${parsedTime.getHours()}:${parsedTime.getMinutes()}`;\n        time.push(formattedTime);\n        quantity.push(amountValue);\n    }\n}\nmsg.payload = {\n    day: day,\n    time: time,\n    quantity: quantity\n}\nmsg.topic = \"data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 140,
        "wires": [
            [
                "12db5a9385c364f4",
                "40cc7505f99a28c0"
            ]
        ]
    },
    {
        "id": "dfa1a520f5462eec",
        "type": "ui_form",
        "z": "aeec0018a0fd818f",
        "name": "",
        "label": "Wednesday",
        "group": "9cfe263e84390285",
        "order": 3,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "Meal 1",
                "value": "meal_1",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_1",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 2",
                "value": "meal_2",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_2",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 3",
                "value": "meal_3",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_3",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "meal_1": "",
            "amount_1": "",
            "meal_2": "",
            "amount_2": "",
            "meal_3": "",
            "amount_3": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "584412aefef6394e"
            ]
        ]
    },
    {
        "id": "584412aefef6394e",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "parse data",
        "func": "const day = \"Wed\"\nconst time = []\nconst quantity = []\nfor (let i = 1; i <= 3; i++) {\n    const mealKey = `meal_${i}`;\n    const amountKey = `amount_${i}`;\n    const mealValue = msg.payload[mealKey];\n    const amountValue = msg.payload[amountKey];\n\n    if (mealValue !== null && amountValue !== null) {\n        // Parse thời gian để chỉ lấy giờ và phút\n        const parsedTime = new Date(mealValue);\n        const formattedTime = `${parsedTime.getHours()}:${parsedTime.getMinutes()}`;\n        time.push(formattedTime);\n        quantity.push(amountValue);\n    }\n}\nmsg.payload = {\n    day: day,\n    time: time,\n    quantity: quantity\n}\nmsg.topic = \"data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 180,
        "wires": [
            [
                "40cc7505f99a28c0",
                "12db5a9385c364f4"
            ]
        ]
    },
    {
        "id": "b8241e1f2b449f47",
        "type": "ui_form",
        "z": "aeec0018a0fd818f",
        "name": "",
        "label": "Thursday",
        "group": "9cfe263e84390285",
        "order": 4,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "Meal 1",
                "value": "meal_1",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_1",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 2",
                "value": "meal_2",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_2",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 3",
                "value": "meal_3",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_3",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "meal_1": "",
            "amount_1": "",
            "meal_2": "",
            "amount_2": "",
            "meal_3": "",
            "amount_3": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 100,
        "y": 220,
        "wires": [
            [
                "34d590fd13aa66c2"
            ]
        ]
    },
    {
        "id": "34d590fd13aa66c2",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "parse data",
        "func": "const day = \"Thu\"\nconst time = []\nconst quantity = []\nfor (let i = 1; i <= 3; i++) {\n    const mealKey = `meal_${i}`;\n    const amountKey = `amount_${i}`;\n    const mealValue = msg.payload[mealKey];\n    const amountValue = msg.payload[amountKey];\n\n    if (mealValue !== null && amountValue !== null) {\n        // Parse thời gian để chỉ lấy giờ và phút\n        const parsedTime = new Date(mealValue);\n        const formattedTime = `${parsedTime.getHours()}:${parsedTime.getMinutes()}`;\n        time.push(formattedTime);\n        quantity.push(amountValue);\n    }\n}\nmsg.payload = {\n    day: day,\n    time: time,\n    quantity: quantity\n}\nmsg.topic = \"data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 220,
        "wires": [
            [
                "40cc7505f99a28c0",
                "12db5a9385c364f4"
            ]
        ]
    },
    {
        "id": "a7e7da37a01019c1",
        "type": "ui_form",
        "z": "aeec0018a0fd818f",
        "name": "",
        "label": "Friday",
        "group": "9cfe263e84390285",
        "order": 5,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "Meal 1",
                "value": "meal_1",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_1",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 2",
                "value": "meal_2",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_2",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 3",
                "value": "meal_3",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_3",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "meal_1": "",
            "amount_1": "",
            "meal_2": "",
            "amount_2": "",
            "meal_3": "",
            "amount_3": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 90,
        "y": 260,
        "wires": [
            [
                "60c102e19a29e3f3"
            ]
        ]
    },
    {
        "id": "60c102e19a29e3f3",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "parse data",
        "func": "const day = \"Fri\"\nconst time = []\nconst quantity = []\nfor (let i = 1; i <= 3; i++) {\n    const mealKey = `meal_${i}`;\n    const amountKey = `amount_${i}`;\n    const mealValue = msg.payload[mealKey];\n    const amountValue = msg.payload[amountKey];\n\n    if (mealValue !== null && amountValue !== null) {\n        // Parse thời gian để chỉ lấy giờ và phút\n        const parsedTime = new Date(mealValue);\n        const formattedTime = `${parsedTime.getHours()}:${parsedTime.getMinutes()}`;\n        time.push(formattedTime);\n        quantity.push(amountValue);\n    }\n}\nmsg.payload = {\n    day: day,\n    time: time,\n    quantity: quantity\n}\nmsg.topic = \"data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 260,
        "wires": [
            [
                "40cc7505f99a28c0",
                "12db5a9385c364f4"
            ]
        ]
    },
    {
        "id": "c6cab5a03c86669e",
        "type": "ui_form",
        "z": "aeec0018a0fd818f",
        "name": "",
        "label": "Saturday",
        "group": "9cfe263e84390285",
        "order": 6,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "Meal 1",
                "value": "meal_1",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_1",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 2",
                "value": "meal_2",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_2",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 3",
                "value": "meal_3",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_3",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "meal_1": "",
            "amount_1": "",
            "meal_2": "",
            "amount_2": "",
            "meal_3": "",
            "amount_3": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 100,
        "y": 300,
        "wires": [
            [
                "be3d6d7053ec948f"
            ]
        ]
    },
    {
        "id": "be3d6d7053ec948f",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "parse data",
        "func": "const day = \"Sat\"\nconst time = []\nconst quantity = []\nfor (let i = 1; i <= 3; i++) {\n    const mealKey = `meal_${i}`;\n    const amountKey = `amount_${i}`;\n    const mealValue = msg.payload[mealKey];\n    const amountValue = msg.payload[amountKey];\n\n    if (mealValue !== null && amountValue !== null) {\n        // Parse thời gian để chỉ lấy giờ và phút\n        const parsedTime = new Date(mealValue);\n        const formattedTime = `${parsedTime.getHours()}:${parsedTime.getMinutes()}`;\n        time.push(formattedTime);\n        quantity.push(amountValue);\n    }\n}\nmsg.payload = {\n    day: day,\n    time: time,\n    quantity: quantity\n}\nmsg.topic = \"data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 300,
        "wires": [
            [
                "40cc7505f99a28c0",
                "12db5a9385c364f4"
            ]
        ]
    },
    {
        "id": "ae65b6af9e7e53ca",
        "type": "ui_form",
        "z": "aeec0018a0fd818f",
        "name": "",
        "label": "Sunday",
        "group": "9cfe263e84390285",
        "order": 7,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "Meal 1",
                "value": "meal_1",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_1",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 2",
                "value": "meal_2",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_2",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 3",
                "value": "meal_3",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_3",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "meal_1": "",
            "amount_1": "",
            "meal_2": "",
            "amount_2": "",
            "meal_3": "",
            "amount_3": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 100,
        "y": 340,
        "wires": [
            [
                "0faa0216275e5d22"
            ]
        ]
    },
    {
        "id": "0faa0216275e5d22",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "parse data",
        "func": "const day = \"Sun\"\nconst time = []\nconst quantity = []\nfor (let i = 1; i <= 3; i++) {\n    const mealKey = `meal_${i}`;\n    const amountKey = `amount_${i}`;\n    const mealValue = msg.payload[mealKey];\n    const amountValue = msg.payload[amountKey];\n\n    if (mealValue !== null && amountValue !== null) {\n        // Parse thời gian để chỉ lấy giờ và phút\n        const parsedTime = new Date(mealValue);\n        const formattedTime = `${parsedTime.getHours()}:${parsedTime.getMinutes()}`;\n        time.push(formattedTime);\n        quantity.push(amountValue);\n    }\n}\nmsg.payload = {\n    day: day,\n    time: time,\n    quantity: quantity\n}\nmsg.topic = \"data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 340,
        "wires": [
            [
                "40cc7505f99a28c0",
                "12db5a9385c364f4"
            ]
        ]
    },
    {
        "id": "65fbe3881b6dbd94",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "function 15",
        "func": "var data = msg.payload;\nvar daydata = [];\n\nfor (const key in data) {\n    if (data.hasOwnProperty(key)) {\n        var currentItem = data[key];\n        if (currentItem.day === \"Mon\") {\n            currentItem.day = \"Monday\"\n            const formattedTimes = currentItem.time.map((time, index) => {\n                const quantity = currentItem.quantity[index] || 0;\n\n                // Parse thời gian để chỉ lấy giờ và phút\n                const parsedTime = time ? time.split(\":\") : null;\n                const formattedHourMinute = parsedTime ? `${parsedTime[0]}h${parsedTime[1]}` : \"\";\n\n                return `<div style=\"margin-top: 15px; padding: 15px; background-color: #f9f9f9; border: 2px solid #e0e0e0; border-radius: 8px; color: #333; font-size: 1.3em;\"><strong>${formattedHourMinute}</strong>: ${quantity}g</div>`;\n            });\n\n            daydata.push({\n                id: key,\n                title: `<span style=\"font-size: 2em; font-weight: bold; color: #333;\">${currentItem.day}</span>`,\n                description: formattedTimes.join(\"\"),\n                quantity: currentItem.quantity || [],\n                time: currentItem.time || []\n            });\n        }\n    }\n}\n\nmsg.payload = daydata;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 620,
        "wires": [
            [
                "c80d21f415ac3bb5"
            ]
        ]
    },
    {
        "id": "c80d21f415ac3bb5",
        "type": "ui_list",
        "z": "aeec0018a0fd818f",
        "group": "4c5c83bbf054b470",
        "name": "Monday",
        "order": 1,
        "width": 5,
        "height": 5,
        "lineType": "three",
        "actionType": "none",
        "allowHTML": true,
        "outputs": 0,
        "topic": "schedule",
        "x": 740,
        "y": 620,
        "wires": []
    },
    {
        "id": "8deba2c7e3677b52",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "function 17",
        "func": "msg.payload = Object.keys(msg.payload)[0]\nmsg.topic = \"id\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 360,
        "wires": [
            [
                "12db5a9385c364f4"
            ]
        ]
    },
    {
        "id": "40cc7505f99a28c0",
        "type": "firebase-get",
        "z": "aeec0018a0fd818f",
        "name": "",
        "constraint": {
            "orderByChild": "day",
            "equalTo": {
                "value": "payload.day",
                "type": "msg"
            }
        },
        "database": "72efe316941c7cdb",
        "outputType": "auto",
        "passThrough": false,
        "path": "schedule",
        "pathType": "str",
        "useConstraint": true,
        "x": 500,
        "y": 360,
        "wires": [
            [
                "8deba2c7e3677b52"
            ]
        ]
    },
    {
        "id": "12db5a9385c364f4",
        "type": "join",
        "z": "aeec0018a0fd818f",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 810,
        "y": 260,
        "wires": [
            [
                "67786f7d39fa2dc0"
            ]
        ]
    },
    {
        "id": "67786f7d39fa2dc0",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "function 18",
        "func": "const path = 'schedule/' + msg.payload.id\n\nmsg.payload = msg.payload.data\nmsg.topic = path\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 260,
        "wires": [
            [
                "9d04189635adbb53"
            ]
        ]
    },
    {
        "id": "9d04189635adbb53",
        "type": "firebase-out",
        "z": "aeec0018a0fd818f",
        "name": "",
        "database": "72efe316941c7cdb",
        "path": "topic",
        "pathType": "msg",
        "priority": 1,
        "queryType": "update",
        "x": 1120,
        "y": 260,
        "wires": []
    },
    {
        "id": "31e65e57f289e979",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "parse data",
        "func": "const day = \"Mon\";\nconst time = [];\nconst quantity = [];\n\nfor (let i = 1; i <= 3; i++) {\n    const mealKey = `meal_${i}`;\n    const amountKey = `amount_${i}`;\n\n    const mealValue = msg.payload[mealKey];\n    const amountValue = msg.payload[amountKey];\n\n    if (mealValue !== null && amountValue !== null) {\n        // Parse thời gian để chỉ lấy giờ và phút\n        const parsedTime = new Date(mealValue);\n        const formattedTime = `${parsedTime.getHours()}:${parsedTime.getMinutes()}`;\n        time.push(formattedTime);\n        quantity.push(amountValue);\n    }\n}\n\nmsg.payload = {\n    day: day,\n    time: time,\n    quantity: quantity\n\n};\nmsg.topic = \"data\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 100,
        "wires": [
            [
                "40cc7505f99a28c0",
                "12db5a9385c364f4"
            ]
        ]
    },
    {
        "id": "7b22d54f98efd88c",
        "type": "mqtt out",
        "z": "aeec0018a0fd818f",
        "name": "",
        "topic": "/PetFeeder/schedule",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "989a90dfdbfa79d0",
        "x": 940,
        "y": 500,
        "wires": []
    },
    {
        "id": "5b97be79c2f2ed18",
        "type": "inject",
        "z": "aeec0018a0fd818f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "e2649e18122e28e3"
            ]
        ]
    },
    {
        "id": "e2649e18122e28e3",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "Get current date to query",
        "func": "var days = ['Sun', 'Mon', 'Tues', 'Wed', 'Thu', 'Fri', 'Sat'];\n\nvar now = new Date();\nvar day = days[now.getDay()];\nmsg.payload = day;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 500,
        "wires": [
            [
                "59065200758bac5d"
            ]
        ]
    },
    {
        "id": "59065200758bac5d",
        "type": "firebase-get",
        "z": "aeec0018a0fd818f",
        "name": "",
        "constraint": {
            "orderByChild": "day",
            "equalTo": {
                "value": "payload",
                "type": "msg"
            }
        },
        "database": "72efe316941c7cdb",
        "outputType": "auto",
        "passThrough": false,
        "path": "schedule",
        "pathType": "str",
        "useConstraint": true,
        "x": 540,
        "y": 500,
        "wires": [
            [
                "74185e9181f57895"
            ]
        ]
    },
    {
        "id": "74185e9181f57895",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "get schedule of today",
        "func": "const data = msg.payload\n\nfor (const key in data) {\n    if (data.hasOwnProperty(key)) {\n        msg.payload = data[key]\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 500,
        "wires": [
            [
                "7b22d54f98efd88c"
            ]
        ]
    },
    {
        "id": "8968f1aa4ef08520",
        "type": "complete",
        "z": "aeec0018a0fd818f",
        "name": "",
        "scope": [
            "9d04189635adbb53"
        ],
        "uncaught": false,
        "x": 130,
        "y": 560,
        "wires": [
            [
                "e2649e18122e28e3",
                "c739aff9dd6b0adc",
                "a5b9dc7130979d54"
            ]
        ]
    },
    {
        "id": "c739aff9dd6b0adc",
        "type": "firebase-get",
        "z": "aeec0018a0fd818f",
        "name": "",
        "constraint": {},
        "database": "72efe316941c7cdb",
        "outputType": "auto",
        "passThrough": false,
        "path": "schedule",
        "pathType": "str",
        "useConstraint": false,
        "x": 340,
        "y": 620,
        "wires": [
            [
                "65fbe3881b6dbd94",
                "a64b850e99994bbd",
                "fc48b5097b74f30d",
                "b10b302381c31c50",
                "46a99d4c287d469e",
                "381bfc0c022c8eb1",
                "539d8229d79d8bfa"
            ]
        ]
    },
    {
        "id": "2272f0a4f8c416c6",
        "type": "inject",
        "z": "aeec0018a0fd818f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "c739aff9dd6b0adc"
            ]
        ]
    },
    {
        "id": "a64b850e99994bbd",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "function 19",
        "func": "var data = msg.payload;\nvar daydata = [];\n\nfor (const key in data) {\n    if (data.hasOwnProperty(key)) {\n        var currentItem = data[key];\n        if (currentItem.day === \"Tue\") {\n            currentItem.day = \"Tuesday\"\n            const formattedTimes = currentItem.time.map((time, index) => {\n                const quantity = currentItem.quantity[index] || 0;\n\n                // Parse thời gian để chỉ lấy giờ và phút\n                const parsedTime = time ? time.split(\":\") : null;\n                const formattedHourMinute = parsedTime ? `${parsedTime[0]}h${parsedTime[1]}` : \"\";\n\n                return `<div style=\"margin-top: 15px; padding: 15px; background-color: #f9f9f9; border: 2px solid #e0e0e0; border-radius: 8px; color: #333; font-size: 1.3em;\"><strong>${formattedHourMinute}</strong>: ${quantity}g</div>`;\n            });\n\n            daydata.push({\n                id: key,\n                title: `<span style=\"font-size: 2em; font-weight: bold; color: #333;\">${currentItem.day}</span>`,\n                description: formattedTimes.join(\"\"),\n                quantity: currentItem.quantity || [],\n                time: currentItem.time || []\n            });\n        }\n    }\n}\n\nmsg.payload = daydata;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 660,
        "wires": [
            [
                "cb08ea257c5e4723"
            ]
        ]
    },
    {
        "id": "cb08ea257c5e4723",
        "type": "ui_list",
        "z": "aeec0018a0fd818f",
        "group": "4c5c83bbf054b470",
        "name": "Tuesday",
        "order": 3,
        "width": 5,
        "height": 5,
        "lineType": "three",
        "actionType": "none",
        "allowHTML": true,
        "outputs": 0,
        "topic": "schedule",
        "x": 740,
        "y": 660,
        "wires": []
    },
    {
        "id": "fc48b5097b74f30d",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "function 20",
        "func": "var data = msg.payload;\nvar daydata = [];\n\nfor (const key in data) {\n    if (data.hasOwnProperty(key)) {\n        var currentItem = data[key];\n        if (currentItem.day === \"Wed\") {\n            currentItem.day = \"Wednesday\"\n            const formattedTimes = currentItem.time.map((time, index) => {\n                const quantity = currentItem.quantity[index] || 0;\n\n                // Parse thời gian để chỉ lấy giờ và phút\n                const parsedTime = time ? time.split(\":\") : null;\n                const formattedHourMinute = parsedTime ? `${parsedTime[0]}h${parsedTime[1]}` : \"\";\n\n                return `<div style=\"margin-top: 15px; padding: 15px; background-color: #f9f9f9; border: 2px solid #e0e0e0; border-radius: 8px; color: #333; font-size: 1.3em;\"><strong>${formattedHourMinute}</strong>: ${quantity}g</div>`;\n            });\n\n            daydata.push({\n                id: key,\n                title: `<span style=\"font-size: 2em; font-weight: bold; color: #333;\">${currentItem.day}</span>`,\n                description: formattedTimes.join(\"\"),\n                quantity: currentItem.quantity || [],\n                time: currentItem.time || []\n            });\n        }\n    }\n}\n\nmsg.payload = daydata;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 700,
        "wires": [
            [
                "119cdd128365ba3d"
            ]
        ]
    },
    {
        "id": "119cdd128365ba3d",
        "type": "ui_list",
        "z": "aeec0018a0fd818f",
        "group": "4c5c83bbf054b470",
        "name": "Wednesday",
        "order": 5,
        "width": 5,
        "height": 5,
        "lineType": "three",
        "actionType": "none",
        "allowHTML": true,
        "outputs": 0,
        "topic": "schedule",
        "x": 750,
        "y": 700,
        "wires": []
    },
    {
        "id": "b10b302381c31c50",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "function 21",
        "func": "var data = msg.payload;\nvar daydata = [];\n\nfor (const key in data) {\n    if (data.hasOwnProperty(key)) {\n        var currentItem = data[key];\n        if (currentItem.day === \"Thu\") {\n            currentItem.day = \"Thursday\"\n            const formattedTimes = currentItem.time.map((time, index) => {\n                const quantity = currentItem.quantity[index] || 0;\n\n                // Parse thời gian để chỉ lấy giờ và phút\n                const parsedTime = time ? time.split(\":\") : null;\n                const formattedHourMinute = parsedTime ? `${parsedTime[0]}h${parsedTime[1]}` : \"\";\n\n                return `<div style=\"margin-top: 15px; padding: 15px; background-color: #f9f9f9; border: 2px solid #e0e0e0; border-radius: 8px; color: #333; font-size: 1.3em;\"><strong>${formattedHourMinute}</strong>: ${quantity}g</div>`;\n            });\n\n            daydata.push({\n                id: key,\n                title: `<span style=\"font-size: 2em; font-weight: bold; color: #333;\">${currentItem.day}</span>`,\n                description: formattedTimes.join(\"\"),\n                quantity: currentItem.quantity || [],\n                time: currentItem.time || []\n            });\n        }\n    }\n}\n\nmsg.payload = daydata;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 740,
        "wires": [
            [
                "f7f9227e68733cb0"
            ]
        ]
    },
    {
        "id": "f7f9227e68733cb0",
        "type": "ui_list",
        "z": "aeec0018a0fd818f",
        "group": "4c5c83bbf054b470",
        "name": "Thursday",
        "order": 15,
        "width": 5,
        "height": 5,
        "lineType": "three",
        "actionType": "none",
        "allowHTML": true,
        "outputs": 0,
        "topic": "schedule",
        "x": 740,
        "y": 740,
        "wires": []
    },
    {
        "id": "46a99d4c287d469e",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "function 22",
        "func": "var data = msg.payload;\nvar daydata = [];\n\nfor (const key in data) {\n    if (data.hasOwnProperty(key)) {\n        var currentItem = data[key];\n        if (currentItem.day === \"Fri\") {\n            currentItem.day = \"Friday\"\n            const formattedTimes = currentItem.time.map((time, index) => {\n                const quantity = currentItem.quantity[index] || 0;\n\n                // Parse thời gian để chỉ lấy giờ và phút\n                const parsedTime = time ? time.split(\":\") : null;\n                const formattedHourMinute = parsedTime ? `${parsedTime[0]}h${parsedTime[1]}` : \"\";\n\n                return `<div style=\"margin-top: 15px; padding: 15px; background-color: #f9f9f9; border: 2px solid #e0e0e0; border-radius: 8px; color: #333; font-size: 1.3em;\"><strong>${formattedHourMinute}</strong>: ${quantity}g</div>`;\n            });\n\n            daydata.push({\n                id: key,\n                title: `<span style=\"font-size: 2em; font-weight: bold; color: #333;\">${currentItem.day}</span>`,\n                description: formattedTimes.join(\"\"),\n                quantity: currentItem.quantity || [],\n                time: currentItem.time || []\n            });\n        }\n    }\n}\n\nmsg.payload = daydata;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 780,
        "wires": [
            [
                "0286485ceea7cd3d"
            ]
        ]
    },
    {
        "id": "0286485ceea7cd3d",
        "type": "ui_list",
        "z": "aeec0018a0fd818f",
        "group": "4c5c83bbf054b470",
        "name": "Friday",
        "order": 17,
        "width": 5,
        "height": 5,
        "lineType": "three",
        "actionType": "none",
        "allowHTML": true,
        "outputs": 0,
        "topic": "schedule",
        "x": 730,
        "y": 780,
        "wires": []
    },
    {
        "id": "381bfc0c022c8eb1",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "function 23",
        "func": "var data = msg.payload;\nvar daydata = [];\n\nfor (const key in data) {\n    if (data.hasOwnProperty(key)) {\n        var currentItem = data[key];\n        if (currentItem.day === \"Sat\") {\n            currentItem.day = \"Saturday\"\n            const formattedTimes = currentItem.time.map((time, index) => {\n                const quantity = currentItem.quantity[index] || 0;\n\n                // Parse thời gian để chỉ lấy giờ và phút\n                const parsedTime = time ? time.split(\":\") : null;\n                const formattedHourMinute = parsedTime ? `${parsedTime[0]}h${parsedTime[1]}` : \"\";\n\n                return `<div style=\"margin-top: 15px; padding: 15px; background-color: #f9f9f9; border: 2px solid #e0e0e0; border-radius: 8px; color: #333; font-size: 1.3em;\"><strong>${formattedHourMinute}</strong>: ${quantity}g</div>`;\n            });\n\n            daydata.push({\n                id: key,\n                title: `<span style=\"font-size: 2em; font-weight: bold; color: #333;\">${currentItem.day}</span>`,\n                description: formattedTimes.join(\"\"),\n                quantity: currentItem.quantity || [],\n                time: currentItem.time || []\n            });\n        }\n    }\n}\n\nmsg.payload = daydata;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 820,
        "wires": [
            [
                "c60b1a704fca2ca1"
            ]
        ]
    },
    {
        "id": "c60b1a704fca2ca1",
        "type": "ui_list",
        "z": "aeec0018a0fd818f",
        "group": "4c5c83bbf054b470",
        "name": "Saturday",
        "order": 19,
        "width": 5,
        "height": 5,
        "lineType": "three",
        "actionType": "none",
        "allowHTML": true,
        "outputs": 0,
        "topic": "schedule",
        "x": 740,
        "y": 820,
        "wires": []
    },
    {
        "id": "539d8229d79d8bfa",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "function 24",
        "func": "var data = msg.payload;\nvar daydata = [];\n\nfor (const key in data) {\n    if (data.hasOwnProperty(key)) {\n        var currentItem = data[key];\n        if (currentItem.day === \"Sun\") {\n            currentItem.day = \"Sunday\"\n            const formattedTimes = currentItem.time.map((time, index) => {\n                const quantity = currentItem.quantity[index] || 0;\n\n                // Parse thời gian để chỉ lấy giờ và phút\n                const parsedTime = time ? time.split(\":\") : null;\n                const formattedHourMinute = parsedTime ? `${parsedTime[0]}h${parsedTime[1]}` : \"\";\n\n                return `<div style=\"margin-top: 15px; padding: 15px; background-color: #f9f9f9; border: 2px solid #e0e0e0; border-radius: 8px; color: #333; font-size: 1.3em;\"><strong>${formattedHourMinute}</strong>: ${quantity}g</div>`;\n            });\n\n            daydata.push({\n                id: key,\n                title: `<span style=\"font-size: 2em; font-weight: bold; color: #333;\">${currentItem.day}</span>`,\n                description: formattedTimes.join(\"\"),\n                quantity: currentItem.quantity || [],\n                time: currentItem.time || []\n            });\n        }\n    }\n}\n\nmsg.payload = daydata;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 860,
        "wires": [
            [
                "f548c825ebd6a67c"
            ]
        ]
    },
    {
        "id": "f548c825ebd6a67c",
        "type": "ui_list",
        "z": "aeec0018a0fd818f",
        "group": "4c5c83bbf054b470",
        "name": "Sunday",
        "order": 30,
        "width": 5,
        "height": 4,
        "lineType": "three",
        "actionType": "none",
        "allowHTML": true,
        "outputs": 0,
        "topic": "schedule",
        "x": 740,
        "y": 860,
        "wires": []
    },
    {
        "id": "504850874bba57bf",
        "type": "ui_toast",
        "z": "aeec0018a0fd818f",
        "position": "bottom right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Notification",
        "name": "",
        "x": 530,
        "y": 560,
        "wires": []
    },
    {
        "id": "a5b9dc7130979d54",
        "type": "function",
        "z": "aeec0018a0fd818f",
        "name": "function 25",
        "func": "msg.payload = \"Schedule have been updated!\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 560,
        "wires": [
            [
                "504850874bba57bf"
            ]
        ]
    }
]