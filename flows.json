[
    {
        "id": "8cb57750c270cbc8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "59541606100e1c83",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "aa387e2f0d42ffcb",
        "type": "group",
        "z": "8cb57750c270cbc8",
        "name": "Send message via IFTTT (deprecated, handled by ESP8266)",
        "style": {
            "label": true
        },
        "nodes": [
            "7632bf76a8fb8ea1",
            "8a4a59a77afd4d7c",
            "dda6c6bf5dc0af38",
            "9cbc3664d7245acf",
            "3fa582ff1a6d923d",
            "b1560d31d3af2865"
        ],
        "x": 1014,
        "y": 59,
        "w": 1092,
        "h": 122
    },
    {
        "id": "6121089994c735e9",
        "type": "group",
        "z": "8cb57750c270cbc8",
        "name": "Food container's data",
        "style": {
            "label": true
        },
        "nodes": [
            "0ab2311e8ee9db55",
            "d0fb4cffb7efe298",
            "cb1c4d5ddc084e15",
            "4b54e9dfa4699251",
            "7714559d5a0fdae4",
            "c4c8373322522680",
            "2859584a56237ddd"
        ],
        "x": 14,
        "y": 59,
        "w": 932,
        "h": 182
    },
    {
        "id": "f2f36c32d53093ef",
        "type": "group",
        "z": "8cb57750c270cbc8",
        "name": "Food plate's data",
        "style": {
            "label": true
        },
        "nodes": [
            "7eb374d38b043e77",
            "e192f1ff41eac710",
            "3484c0500be9f911",
            "26eaf7f97363dfcf",
            "6a35d814b15cfb0f",
            "7faa1b13f7f64518",
            "47c5f12e4555a9ef"
        ],
        "x": 14,
        "y": 299,
        "w": 952,
        "h": 242
    },
    {
        "id": "e91f5d42b973c39b",
        "type": "group",
        "z": "8cb57750c270cbc8",
        "name": "Send data to ThingSpeak",
        "style": {
            "label": true
        },
        "nodes": [
            "b536e87dd5f6240f",
            "015c591152a666b6",
            "b7e2a94334a13e0a",
            "2b26d5ce8260c705",
            "0eb2fb2797d105d6"
        ],
        "x": 1014,
        "y": 259,
        "w": 752,
        "h": 142
    },
    {
        "id": "5fa57a33c8c22a91",
        "type": "group",
        "z": "8cb57750c270cbc8",
        "name": "Manual feeding",
        "style": {
            "label": true
        },
        "nodes": [
            "d5ceeacb98b12bd7",
            "e6fcab6370d6f581",
            "ab3e266a8a0aab9a",
            "4e5988f4fa1c4a3c",
            "e22ef872c5258e82",
            "d4c1d8f4f5bfd649",
            "80f586ee6bdeb337",
            "83459e41144e7fec",
            "d4bf301d90ffb42f",
            "b6fb1aa0f1bcbcbf",
            "bc4f0b9a66a70aa7"
        ],
        "x": 14,
        "y": 599,
        "w": 1012,
        "h": 202
    },
    {
        "id": "649ac7994d2c9754",
        "type": "group",
        "z": "8cb57750c270cbc8",
        "name": "Initialization, login and register",
        "style": {
            "label": true
        },
        "nodes": [
            "2c4dcdc868085b78",
            "f76e01fdb2e63566",
            "61eb2bb9548da506",
            "02df54cd56f04f5b",
            "e339974adb91f8cd",
            "2a878a074d5e084d",
            "0e72793af18ed8c0",
            "199c501cae4237e6",
            "22ed6802f714b77e",
            "b105a6a59313121b",
            "1f31f9d5e78e7636",
            "221a8db54457315c",
            "9a37cfc59b9e50db",
            "d481518dc60239e1",
            "7812155d4f3d8392",
            "e2c967381011d9f7",
            "73cd45ba9fbd12e7",
            "2daa4cb49ab20448",
            "5b5f2713db759aee",
            "428f6e140e764550",
            "bc34547580822004",
            "df3f87a51866c91d",
            "cde3d5c964af9ce5",
            "db4f4729c1ef3a91",
            "ed507e8142d4bbd5"
        ],
        "x": 14,
        "y": 1519,
        "w": 1232,
        "h": 622
    },
    {
        "id": "b7d59f86b2ee88cc",
        "type": "group",
        "z": "59541606100e1c83",
        "name": "Set schedule",
        "style": {
            "label": true
        },
        "nodes": [
            "d1c19663685c132c",
            "b3f64b71beadf503",
            "4706b12e596afbb6",
            "513c01d17e405f21",
            "a519b7a5789e7f8f",
            "0e865ee211eb49f6",
            "3a48c50918db5446",
            "cf96d6359eaa35bd",
            "4cf228a07a8b89da",
            "d14e5053f9b0b4bb",
            "003b8f21b81dd47e",
            "1c2438192f9b7152",
            "00737ebbdb7354cd",
            "5dc59026099f274c",
            "cd338edfa99dfe11",
            "76fd94264ed5903d",
            "db46a611083ffe2d",
            "206519fbd154b5d3",
            "19860ffcae497985"
        ],
        "x": 14,
        "y": 59,
        "w": 1192,
        "h": 342
    },
    {
        "id": "3a7e8f5475508b6f",
        "type": "group",
        "z": "59541606100e1c83",
        "name": "Send daily schedule with MQTT and show the whole schedule in website",
        "style": {
            "label": true
        },
        "nodes": [
            "44dc0c6324261b21",
            "e01e1ba4ab358e48",
            "0114a70e2aba719e",
            "ac1e87f2d19cf745",
            "3a78483fd287a2ef",
            "36d9ae9f6df43ffe",
            "2722d0cf0eecb70c",
            "9216c7216f4dbd6b",
            "e43f52cae091f6d2",
            "6ea659e13ac71ceb",
            "3316fb2b988f4db7",
            "d0ed56cf44098720",
            "7f449d3e2db723d6",
            "477b0a2d1cf8b8dc",
            "1282fc76da8a7f6c",
            "07330db0f2a9ca2b",
            "12090d0ddb697fd6",
            "7d2f3462eec5b23f",
            "c8f54d5b12df7269",
            "c3fb45723be792bc",
            "bb8c3a40094e9c3f",
            "0076cbcc91bf9d4f",
            "3c32b200476e63e2",
            "61b25ea218b82461"
        ],
        "x": 14,
        "y": 459,
        "w": 1052,
        "h": 442
    },
    {
        "id": "32b9074e20077c31",
        "type": "group",
        "z": "8cb57750c270cbc8",
        "name": "Get data from ThingSpeak for statistics",
        "style": {
            "label": true
        },
        "nodes": [
            "f08ed4c2e54458ae",
            "6666e9bdad490c91",
            "14233061d6d9e0e8",
            "c1c1e1b5a34a4b7a",
            "daafaf1b4b4eb69b",
            "6a77e3cd58af1ba0",
            "447ebdad0354f801",
            "4f5c2f78a8863fb9",
            "45c9f636154cbfe7",
            "a7b590f2d3716f99",
            "455455352a95613d",
            "5b8851eb1f1cbb6a",
            "55d5c6d50d7899d7",
            "0d9153855cbefa17",
            "14b2cf38376f4f1f",
            "3f91e487d7968a3a",
            "3d8dd9b84cfd205d",
            "1c16077007266a4e",
            "57be545be5ad6674",
            "23069d03f0e68966",
            "a00e3e18af3e9399",
            "7f0fcee1ac394ee1",
            "a7661709c3721c12",
            "04d7cbf598a02aad",
            "9a76d01205eba4ef",
            "dde3b3ea5cbdd9c9",
            "efb9737f417a240a",
            "22d47acdf3a47b3c",
            "c312e3dc1586f626",
            "ba5e525c52e43859"
        ],
        "x": 14,
        "y": 859,
        "w": 1172,
        "h": 602
    },
    {
        "id": "bc72179531874d62",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#000000",
                "baseFont": "Lucida Sans Typewriter,Lucida Console,Monaco,monospace",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": true
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": true
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "4c5c83bbf054b470",
        "type": "ui_group",
        "name": "Current Feeding Schedule",
        "tab": "21050288c08ab01b",
        "order": 1,
        "disp": true,
        "width": "17",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0aaa3500562561ea",
        "type": "ui_group",
        "name": "Food Container",
        "tab": "8d66d040c5a991d1",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2f7ae1d9dbb40962",
        "type": "ui_group",
        "name": "Food Plate",
        "tab": "8d66d040c5a991d1",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "df7f1b0707f0384d",
        "type": "ui_group",
        "name": "Manual Feeding",
        "tab": "8d66d040c5a991d1",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "989a90dfdbfa79d0",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "77c1c2640f0c5d2f",
        "type": "ui_tab",
        "name": "Login",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "8d66d040c5a991d1",
        "type": "ui_tab",
        "name": "Home",
        "icon": "fa-home ",
        "order": 3,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "aa6de7dd52d2548b",
        "type": "ui_tab",
        "name": "Statistics",
        "icon": "fa-area-chart ",
        "order": 4,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "2d66c14763805337",
        "type": "ui_group",
        "name": "Daily Statistics",
        "tab": "aa6de7dd52d2548b",
        "order": 1,
        "disp": true,
        "width": 9,
        "collapse": false,
        "className": ""
    },
    {
        "id": "72efe316941c7cdb",
        "type": "database-config",
        "name": "IoTUserData",
        "authType": "anonymous",
        "claims": {},
        "createUser": false,
        "useClaims": false
    },
    {
        "id": "9cbf2894d993b243",
        "type": "ui_tab",
        "name": "Register",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "3e45edafd7d05920",
        "type": "ui_group",
        "name": "Register",
        "tab": "9cbf2894d993b243",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "85358fcf49a28cef",
        "type": "ui_tab",
        "name": "Schedule",
        "icon": "schedule",
        "order": 5,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "9cfe263e84390285",
        "type": "ui_group",
        "name": "Schedule Feeding",
        "tab": "85358fcf49a28cef",
        "order": 1,
        "disp": true,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "885a9f12b26556e0",
        "type": "ui_group",
        "name": "Login",
        "tab": "77c1c2640f0c5d2f",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "21050288c08ab01b",
        "type": "ui_tab",
        "name": "Current Schedule",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "e07bcfcea8bc3079",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "c31648c90528a650",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "e036f23a8eabb5c7",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "b76033b3b6d1983f",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "0e463b366bc77162",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "669cc6b6703d9543",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "dcf3697414c2d648",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "fbc43ec249738a4a",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "ed696a737de43439",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "75b74d8bcb9f70a1",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "554a143179b0f070",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 14,
        "width": 17,
        "height": 1
    },
    {
        "id": "a9f5117b949a14be",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 16,
        "width": 1,
        "height": 1
    },
    {
        "id": "9e5df6136e93fd86",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 18,
        "width": 1,
        "height": 1
    },
    {
        "id": "021d992ca1bad3ef",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "747d0cf6cea7ce46",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 21,
        "width": 1,
        "height": 1
    },
    {
        "id": "8332d2d6f9fc865c",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 22,
        "width": 1,
        "height": 1
    },
    {
        "id": "0f74807a47558d7e",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 23,
        "width": 1,
        "height": 1
    },
    {
        "id": "0bdcb33a39232591",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 24,
        "width": 1,
        "height": 1
    },
    {
        "id": "0b98a00a3677f797",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 25,
        "width": 1,
        "height": 1
    },
    {
        "id": "5ab8f1b7a33edbae",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 26,
        "width": 1,
        "height": 1
    },
    {
        "id": "e56303e8fe07bd02",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 27,
        "width": 1,
        "height": 1
    },
    {
        "id": "efa2003c5d067ba3",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 28,
        "width": 17,
        "height": 1
    },
    {
        "id": "4f67d51e573cb968",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 29,
        "width": 6,
        "height": 1
    },
    {
        "id": "6c5544a1ce7bf593",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 31,
        "width": 6,
        "height": 1
    },
    {
        "id": "75565c0c1b08aa86",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 32,
        "width": 6,
        "height": 1
    },
    {
        "id": "208744401d699e5f",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 33,
        "width": 6,
        "height": 1
    },
    {
        "id": "baed955da95a55cd",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 34,
        "width": 6,
        "height": 1
    },
    {
        "id": "9484cac9a911abc2",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 35,
        "width": 6,
        "height": 1
    },
    {
        "id": "7f5543a2759250bb",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 36,
        "width": 6,
        "height": 1
    },
    {
        "id": "bbe9ce7714f04845",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "4c5c83bbf054b470",
        "order": 37,
        "width": 6,
        "height": 1
    },
    {
        "id": "01c0c33e39583e02",
        "type": "ui_spacer",
        "z": "59541606100e1c83",
        "name": "spacer",
        "group": "9cfe263e84390285",
        "order": 8,
        "width": 6,
        "height": 1
    },
    {
        "id": "f434af1b842eed99",
        "type": "ui_group",
        "name": "Weekly Statistics",
        "tab": "aa6de7dd52d2548b",
        "order": 3,
        "disp": true,
        "width": 9,
        "collapse": false,
        "className": ""
    },
    {
        "id": "2c4dcdc868085b78",
        "type": "ui_form",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "",
        "label": "",
        "group": "885a9f12b26556e0",
        "order": 4,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": ""
        },
        "payload": "",
        "submit": "Login",
        "cancel": "",
        "topic": "user",
        "topicType": "str",
        "splitLayout": "",
        "className": "",
        "x": 110,
        "y": 1680,
        "wires": [
            [
                "22ed6802f714b77e",
                "1f31f9d5e78e7636"
            ]
        ]
    },
    {
        "id": "f76e01fdb2e63566",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "Initialization",
        "func": "flow.set(\"amount\", 100)\nflow.set(\"plate_remain\", 0)\nflow.set(\"container_remain_percentage\", 0)\n\n// Flags for ifttt notification\nflow.set(\"noti_50\", true)\nflow.set(\"noti_20\", true)\nflow.set(\"noti_0\", true)\n\nmsg.payload = {\n    \"tabs\": {\n        \"show\": [\"Login\", \"Register\"]\n    },\n    \"tab\": \"Login\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1560,
        "wires": [
            [
                "02df54cd56f04f5b"
            ]
        ]
    },
    {
        "id": "61eb2bb9548da506",
        "type": "inject",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1560,
        "wires": [
            [
                "f76e01fdb2e63566"
            ]
        ]
    },
    {
        "id": "0ab2311e8ee9db55",
        "type": "ui_gauge",
        "z": "8cb57750c270cbc8",
        "g": "6121089994c735e9",
        "name": "",
        "group": "0aaa3500562561ea",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "donut",
        "title": "Percentage of food left",
        "label": "%",
        "format": "{{msg.payload.percentage}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#ca3838",
            "#e6e600",
            "#00b400"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 740,
        "y": 140,
        "wires": []
    },
    {
        "id": "d0fb4cffb7efe298",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "6121089994c735e9",
        "name": "Get and calculate container",
        "func": "// msg.payload: Loadcell's value (in gram)\nconst num = parseFloat(msg.payload.toFixed(2))\n// Fixed max weight = 700g\nconst percentage = parseFloat((num / 700 * 100).toFixed(2))\n\nmsg.payload = {\n    num: num,\n    percentage: percentage\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 160,
        "wires": [
            [
                "cb1c4d5ddc084e15",
                "0ab2311e8ee9db55",
                "c4c8373322522680"
            ]
        ]
    },
    {
        "id": "7eb374d38b043e77",
        "type": "ui_gauge",
        "z": "8cb57750c270cbc8",
        "g": "f2f36c32d53093ef",
        "name": "",
        "group": "2f7ae1d9dbb40962",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "donut",
        "title": "Percentage of food left",
        "label": "%",
        "format": "{{msg.payload.percentage}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#fc3838",
            "#e6e600",
            "#00b500"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 660,
        "y": 400,
        "wires": []
    },
    {
        "id": "e192f1ff41eac710",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "f2f36c32d53093ef",
        "name": "Get and calculate plate",
        "func": "// msg.payload = Loadcell's value (in gram)\nconst num = parseFloat(msg.payload.toFixed(2))\n// Fixed max weight = 200g\nconst percentage = parseFloat((num / 200 * 100).toFixed(2))\n\nmsg.payload = {\n    num: num,\n    percentage: percentage\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 380,
        "wires": [
            [
                "7eb374d38b043e77",
                "3484c0500be9f911",
                "7faa1b13f7f64518",
                "47c5f12e4555a9ef"
            ]
        ]
    },
    {
        "id": "cb1c4d5ddc084e15",
        "type": "ui_text",
        "z": "8cb57750c270cbc8",
        "g": "6121089994c735e9",
        "group": "0aaa3500562561ea",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Weight: ",
        "format": "{{msg.payload.num}} g",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 700,
        "y": 100,
        "wires": []
    },
    {
        "id": "3484c0500be9f911",
        "type": "ui_text",
        "z": "8cb57750c270cbc8",
        "g": "f2f36c32d53093ef",
        "group": "2f7ae1d9dbb40962",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Weight:",
        "format": "{{msg.payload.num}} g",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 620,
        "y": 340,
        "wires": []
    },
    {
        "id": "e6fcab6370d6f581",
        "type": "ui_button",
        "z": "8cb57750c270cbc8",
        "g": "5fa57a33c8c22a91",
        "name": "",
        "group": "df7f1b0707f0384d",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Feed Now",
        "tooltip": "Press this button to feed your pet immediately without schedules",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 700,
        "wires": [
            [
                "4e5988f4fa1c4a3c"
            ]
        ]
    },
    {
        "id": "d5ceeacb98b12bd7",
        "type": "ui_numeric",
        "z": "8cb57750c270cbc8",
        "g": "5fa57a33c8c22a91",
        "name": "",
        "label": "Food amount:",
        "tooltip": "",
        "group": "df7f1b0707f0384d",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}} g",
        "min": "50",
        "max": "700",
        "step": "50",
        "className": "",
        "x": 120,
        "y": 640,
        "wires": [
            [
                "ab3e266a8a0aab9a"
            ]
        ]
    },
    {
        "id": "ab3e266a8a0aab9a",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "5fa57a33c8c22a91",
        "name": "function 5",
        "func": "flow.set(\"amount\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "4e5988f4fa1c4a3c",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "5fa57a33c8c22a91",
        "name": "function 6",
        "func": "const container_remain = flow.get(\"container_remain\")\nconst plate_remain = flow.get(\"plate_remain\")\nconst amount_to_feed = flow.get(\"amount\")\n\nif(container_remain < amount_to_feed){\n    msg.payload = {\n        failure: \"Your food container doesn't have enough food!\"\n    }\n}\nelse if(1000 - plate_remain < amount_to_feed){\n    msg.payload = {\n        failure: \"Your plate can't hold that much food!\"\n    }\n}\nelse{\n    msg.payload = {\n        success: \"Preparing to feed your pet!\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 700,
        "wires": [
            [
                "d4c1d8f4f5bfd649"
            ]
        ]
    },
    {
        "id": "e22ef872c5258e82",
        "type": "ui_toast",
        "z": "8cb57750c270cbc8",
        "g": "5fa57a33c8c22a91",
        "position": "bottom right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Success notification",
        "x": 780,
        "y": 720,
        "wires": []
    },
    {
        "id": "d4c1d8f4f5bfd649",
        "type": "switch",
        "z": "8cb57750c270cbc8",
        "g": "5fa57a33c8c22a91",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "failure",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "success",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 700,
        "wires": [
            [
                "d4bf301d90ffb42f"
            ],
            [
                "80f586ee6bdeb337"
            ]
        ]
    },
    {
        "id": "80f586ee6bdeb337",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "5fa57a33c8c22a91",
        "name": "function 7",
        "func": "const message = msg.payload.success\nmsg.payload = message\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 720,
        "wires": [
            [
                "e22ef872c5258e82",
                "bc4f0b9a66a70aa7"
            ]
        ]
    },
    {
        "id": "83459e41144e7fec",
        "type": "ui_toast",
        "z": "8cb57750c270cbc8",
        "g": "5fa57a33c8c22a91",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Failure notification",
        "x": 770,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "d4bf301d90ffb42f",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "5fa57a33c8c22a91",
        "name": "function 8",
        "func": "const message = msg.payload.failure\nmsg.payload = message\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 680,
        "wires": [
            [
                "83459e41144e7fec"
            ]
        ]
    },
    {
        "id": "6666e9bdad490c91",
        "type": "ui_text",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "group": "2f7ae1d9dbb40962",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Your pet has eaten:",
        "format": "{{msg.payload}} g",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 930,
        "y": 1080,
        "wires": []
    },
    {
        "id": "4b54e9dfa4699251",
        "type": "mqtt in",
        "z": "8cb57750c270cbc8",
        "g": "6121089994c735e9",
        "name": "",
        "topic": "/PetFeeder/scale/container",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "989a90dfdbfa79d0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 160,
        "wires": [
            [
                "d0fb4cffb7efe298",
                "7714559d5a0fdae4"
            ]
        ]
    },
    {
        "id": "7714559d5a0fdae4",
        "type": "debug",
        "z": "8cb57750c270cbc8",
        "g": "6121089994c735e9",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 200,
        "wires": []
    },
    {
        "id": "b6fb1aa0f1bcbcbf",
        "type": "mqtt out",
        "z": "8cb57750c270cbc8",
        "g": "5fa57a33c8c22a91",
        "name": "",
        "topic": "/PetFeeder/feed",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "989a90dfdbfa79d0",
        "x": 920,
        "y": 760,
        "wires": []
    },
    {
        "id": "bc4f0b9a66a70aa7",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "5fa57a33c8c22a91",
        "name": "function 9",
        "func": "msg.payload = flow.get(\"amount\")\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 760,
        "wires": [
            [
                "b6fb1aa0f1bcbcbf"
            ]
        ]
    },
    {
        "id": "26eaf7f97363dfcf",
        "type": "mqtt in",
        "z": "8cb57750c270cbc8",
        "g": "f2f36c32d53093ef",
        "name": "",
        "topic": "/PetFeeder/scale/plate",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "989a90dfdbfa79d0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 380,
        "wires": [
            [
                "e192f1ff41eac710",
                "6a35d814b15cfb0f"
            ]
        ]
    },
    {
        "id": "6a35d814b15cfb0f",
        "type": "debug",
        "z": "8cb57750c270cbc8",
        "g": "f2f36c32d53093ef",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 420,
        "wires": []
    },
    {
        "id": "02df54cd56f04f5b",
        "type": "ui_ui_control",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "",
        "events": "all",
        "x": 1100,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "e339974adb91f8cd",
        "type": "switch",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "success",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "failure",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 1740,
        "wires": [
            [
                "2a878a074d5e084d",
                "9a37cfc59b9e50db"
            ],
            [
                "0e72793af18ed8c0"
            ]
        ]
    },
    {
        "id": "2a878a074d5e084d",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "Login success",
        "func": "msg.payload = msg.payload.success\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1700,
        "wires": [
            [
                "199c501cae4237e6"
            ]
        ]
    },
    {
        "id": "0e72793af18ed8c0",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "Login failure",
        "func": "msg.payload = msg.payload.failure\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1780,
        "wires": [
            [
                "199c501cae4237e6"
            ]
        ]
    },
    {
        "id": "199c501cae4237e6",
        "type": "ui_toast",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "position": "bottom right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Notification",
        "name": "",
        "x": 1130,
        "y": 1740,
        "wires": []
    },
    {
        "id": "7632bf76a8fb8ea1",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "aa387e2f0d42ffcb",
        "name": "Check percentage for notification",
        "func": "const old_percentage = flow.get(\"container_remain_percentage\")\n\nconst new_percentage = msg.payload.percentage\n\n// If the amount of food drops\nif(new_percentage < old_percentage){\n    if(new_percentage <= 50){\n        if(flow.get(\"noti_50\") === false){\n            msg.payload = {\n                notif: \"Your food container is below 50%\"\n            }\n            flow.set(\"noti_50\", true)\n        }\n    }\n    if (new_percentage <= 20) {\n        if(flow.get(\"noti_20\") === false){\n            msg.payload = {\n                notif: \"Your food container is below 20%\"\n            }\n            flow.set(\"noti_20\", true)\n        }\n    }\n    if (new_percentage == 0) {\n        if(flow.get(\"noti_0\") === false){\n            msg.payload = {\n                notif: \"Your food container is empty, go back and fill it!!!\"\n            }\n            flow.set(\"noti_0\", true)\n        }\n    }\n}\nelse{\n    if(new_percentage > 0){\n        if(flow.get(\"noti_0\") === true){\n            flow.set(\"noti_0\", false)\n        }\n    }\n    if(new_percentage > 20){\n        if(flow.get(\"noti_20\") === true){\n            flow.set(\"noti_20\", false)\n        }\n    }\n    if(new_percentage > 50){\n        if(flow.get(\"noti_50\") === true){\n            flow.set(\"noti_50\", false)\n        }\n    }\n}\n\nflow.set(\"container_remain_percentage\", new_percentage)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 100,
        "wires": [
            [
                "8a4a59a77afd4d7c"
            ]
        ]
    },
    {
        "id": "8a4a59a77afd4d7c",
        "type": "switch",
        "z": "8cb57750c270cbc8",
        "g": "aa387e2f0d42ffcb",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "notif",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 100,
        "wires": [
            [
                "b1560d31d3af2865",
                "3fa582ff1a6d923d"
            ]
        ]
    },
    {
        "id": "b1560d31d3af2865",
        "type": "debug",
        "z": "8cb57750c270cbc8",
        "g": "aa387e2f0d42ffcb",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 140,
        "wires": []
    },
    {
        "id": "dda6c6bf5dc0af38",
        "type": "http request",
        "z": "8cb57750c270cbc8",
        "g": "aa387e2f0d42ffcb",
        "name": "Send notification",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "https://maker.ifttt.com/trigger/food_container/with/key/p2uFc04S-wZa--ullRaUbLBoZWcztXBX7qcMNV5fn__",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1830,
        "y": 100,
        "wires": [
            [
                "9cbc3664d7245acf"
            ]
        ]
    },
    {
        "id": "9cbc3664d7245acf",
        "type": "debug",
        "z": "8cb57750c270cbc8",
        "g": "aa387e2f0d42ffcb",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2000,
        "y": 100,
        "wires": []
    },
    {
        "id": "3fa582ff1a6d923d",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "aa387e2f0d42ffcb",
        "name": "Parse notif into value1 for IFTTT",
        "func": "msg.payload = {\n    \"value1\": msg.payload.notif\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 100,
        "wires": [
            [
                "dda6c6bf5dc0af38"
            ]
        ]
    },
    {
        "id": "c4c8373322522680",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "6121089994c735e9",
        "name": "Prepare data to push to Thingspeak",
        "func": "msg.payload = msg.payload.percentage\nmsg.topic = \"field2\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 180,
        "wires": [
            [
                "b7e2a94334a13e0a"
            ]
        ]
    },
    {
        "id": "14233061d6d9e0e8",
        "type": "http request",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "Get data from ThingSpeak",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2372088/feeds.json?api_key=KYAW97ZDGX7CCNPF&days=1&timezone=Asia%2FBangkok",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 360,
        "y": 980,
        "wires": [
            [
                "c1c1e1b5a34a4b7a"
            ]
        ]
    },
    {
        "id": "c1c1e1b5a34a4b7a",
        "type": "json",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 570,
        "y": 980,
        "wires": [
            [
                "455455352a95613d",
                "daafaf1b4b4eb69b",
                "447ebdad0354f801",
                "45c9f636154cbfe7"
            ]
        ]
    },
    {
        "id": "daafaf1b4b4eb69b",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "Parse data",
        "func": "const entries = msg.payload.feeds\n\nconst data = entries.map((entry) => {\n    return parseFloat(entry.field2)\n})\n\nconst labels = entries.map((entry) => {\n    return entry.created_at.substr(11,8)\n})\n\nmsg.payload = [{\n    \"series\": [\"Amount\"],\n    \"data\": [[...data]],\n    \"labels\": [...labels]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 940,
        "wires": [
            [
                "6a77e3cd58af1ba0"
            ]
        ]
    },
    {
        "id": "6a77e3cd58af1ba0",
        "type": "ui_chart",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "",
        "group": "2d66c14763805337",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Food Container",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "monotone",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 920,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "7faa1b13f7f64518",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "f2f36c32d53093ef",
        "name": "Prepare plate's percentage to push to Thingspeak",
        "func": "msg.payload = msg.payload.percentage\nmsg.topic = \"field3\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 460,
        "wires": [
            [
                "b7e2a94334a13e0a"
            ]
        ]
    },
    {
        "id": "447ebdad0354f801",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "Parse data",
        "func": "const entries = msg.payload.feeds\n\nconst data = entries.map((entry) => {\n    return parseFloat(entry.field3)\n})\n\nconst labels = entries.map((entry) => {\n    return entry.created_at.substr(11,8)\n})\n\nmsg.payload = [{\n    \"series\": [\"Amount\"],\n    \"data\": [[...data]],\n    \"labels\": [...labels]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 980,
        "wires": [
            [
                "4f5c2f78a8863fb9"
            ]
        ]
    },
    {
        "id": "4f5c2f78a8863fb9",
        "type": "ui_chart",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "",
        "group": "2d66c14763805337",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Food Plate",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "monotone",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "47c5f12e4555a9ef",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "f2f36c32d53093ef",
        "name": "Prepare pet's eaten amount to send to Thingspeak",
        "func": "const old_plate_remain = flow.get(\"plate_remain\")\n\nconst current_plate_remain = msg.payload.num\n\nif(current_plate_remain < old_plate_remain){\n    msg.payload = old_plate_remain - current_plate_remain\n}\nelse{\n    msg.payload = 0\n}\nmsg.topic = \"field4\"\n\nflow.set(\"plate_remain\", current_plate_remain)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 500,
        "wires": [
            [
                "b7e2a94334a13e0a"
            ]
        ]
    },
    {
        "id": "45c9f636154cbfe7",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "Parse data",
        "func": "const entries = msg.payload.feeds.filter((entry) => {\n    return entry.field4 !== null\n})\n\nconst data = entries.map((entry) => {\n    return parseFloat(entry.field4)\n})\n\nconst labels = entries.map((entry) => {\n    return entry.created_at.substr(11,8)\n})\n\nmsg.payload = [{\n    \"series\": [\"Amount\"],\n    \"data\": [[...data]],\n    \"labels\": [...labels]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1020,
        "wires": [
            [
                "a7b590f2d3716f99"
            ]
        ]
    },
    {
        "id": "a7b590f2d3716f99",
        "type": "ui_chart",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "",
        "group": "2d66c14763805337",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Eaten Amount",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 920,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "b536e87dd5f6240f",
        "type": "http request",
        "z": "8cb57750c270cbc8",
        "g": "e91f5d42b973c39b",
        "name": "Send data to Thingspeak",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/update?api_key=XRSGUUMCOGOTT89V",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1450,
        "y": 300,
        "wires": [
            [
                "015c591152a666b6"
            ]
        ]
    },
    {
        "id": "015c591152a666b6",
        "type": "debug",
        "z": "8cb57750c270cbc8",
        "g": "e91f5d42b973c39b",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 300,
        "wires": []
    },
    {
        "id": "b7e2a94334a13e0a",
        "type": "join",
        "z": "8cb57750c270cbc8",
        "g": "e91f5d42b973c39b",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1090,
        "y": 300,
        "wires": [
            [
                "2b26d5ce8260c705"
            ]
        ]
    },
    {
        "id": "2b26d5ce8260c705",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "e91f5d42b973c39b",
        "name": "Filter",
        "func": "if (msg.payload.field4 === 0){\n    delete msg.payload.field4;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 300,
        "wires": [
            [
                "0eb2fb2797d105d6",
                "b536e87dd5f6240f"
            ]
        ]
    },
    {
        "id": "0eb2fb2797d105d6",
        "type": "debug",
        "z": "8cb57750c270cbc8",
        "g": "e91f5d42b973c39b",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 360,
        "wires": []
    },
    {
        "id": "f08ed4c2e54458ae",
        "type": "inject",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 980,
        "wires": [
            [
                "14233061d6d9e0e8",
                "55d5c6d50d7899d7"
            ]
        ]
    },
    {
        "id": "455455352a95613d",
        "type": "debug",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 900,
        "wires": []
    },
    {
        "id": "22ed6802f714b77e",
        "type": "firebase-get",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "Search account",
        "constraint": {
            "orderByChild": "username",
            "equalTo": {
                "value": "payload.username",
                "type": "msg"
            }
        },
        "database": "72efe316941c7cdb",
        "outputType": "auto",
        "passThrough": false,
        "path": "accounts",
        "pathType": "str",
        "useConstraint": true,
        "x": 300,
        "y": 1680,
        "wires": [
            [
                "b105a6a59313121b"
            ]
        ]
    },
    {
        "id": "b105a6a59313121b",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "Check for account's existence",
        "func": "const data = msg.payload\n\nif(data === null){\n    msg.payload = \"Wrong account/password\"\n    msg.topic = \"failure\"\n}\n\nfor (const key in data){\n    if(data.hasOwnProperty(key)){\n        msg.payload = data[key].password\n        msg.topic = \"get_password\"\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1740,
        "wires": [
            [
                "1f31f9d5e78e7636"
            ]
        ]
    },
    {
        "id": "1f31f9d5e78e7636",
        "type": "join",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 310,
        "y": 1800,
        "wires": [
            [
                "221a8db54457315c"
            ]
        ]
    },
    {
        "id": "221a8db54457315c",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "Check password",
        "func": "const data = msg.payload\n\nif(data.hasOwnProperty(\"failure\")){\n    msg.payload = {\n        failure: \"Wrong account/password\"\n    }\n}\nelse{\n    if(data.user.password === data.get_password){\n        msg.payload = {\n        success: \"Login completed\"\n        }\n    }\n    else{\n        msg.payload = {\n            failure: \"Wrong account/password\"\n        }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1800,
        "wires": [
            [
                "e339974adb91f8cd"
            ]
        ]
    },
    {
        "id": "9a37cfc59b9e50db",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "Login complete",
        "func": "msg.payload = {\n    \"tabs\": {\n        \"show\": [\"Home\", \"Statistics\", \"Schedule\",\"Current Schedule\"],\n        \"hide\": [\"Login\", \"Register\"]\n    },\n    \"tab\": \"Home\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1640,
        "wires": [
            [
                "02df54cd56f04f5b"
            ]
        ]
    },
    {
        "id": "d481518dc60239e1",
        "type": "ui_form",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "",
        "label": "",
        "group": "3e45edafd7d05920",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": ""
        },
        "payload": "",
        "submit": "Register",
        "cancel": "",
        "topic": "user",
        "topicType": "str",
        "splitLayout": "",
        "className": "",
        "x": 110,
        "y": 1880,
        "wires": [
            [
                "e2c967381011d9f7",
                "2daa4cb49ab20448"
            ]
        ]
    },
    {
        "id": "7812155d4f3d8392",
        "type": "firebase-out",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "Add account",
        "database": "72efe316941c7cdb",
        "path": "accounts",
        "pathType": "str",
        "priority": 1,
        "queryType": "push",
        "x": 930,
        "y": 2100,
        "wires": []
    },
    {
        "id": "e2c967381011d9f7",
        "type": "firebase-get",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "Search account",
        "constraint": {
            "orderByChild": "username",
            "equalTo": {
                "value": "payload.username",
                "type": "msg"
            }
        },
        "database": "72efe316941c7cdb",
        "outputType": "auto",
        "passThrough": false,
        "path": "accounts",
        "pathType": "str",
        "useConstraint": true,
        "x": 280,
        "y": 1880,
        "wires": [
            [
                "73cd45ba9fbd12e7"
            ]
        ]
    },
    {
        "id": "73cd45ba9fbd12e7",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "Check username duplication",
        "func": "const data = msg.payload;\n\nif(data !== null){\n    msg.payload = \"Account has already existed\"\n    msg.topic = \"failure\"\n}\nelse{\n    msg.payload = \"Successfully created an account\"\n    msg.topic = \"success\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1880,
        "wires": [
            [
                "2daa4cb49ab20448"
            ]
        ]
    },
    {
        "id": "2daa4cb49ab20448",
        "type": "join",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 310,
        "y": 1940,
        "wires": [
            [
                "5b5f2713db759aee"
            ]
        ]
    },
    {
        "id": "5b5f2713db759aee",
        "type": "switch",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "failure",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "success",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 1940,
        "wires": [
            [
                "df3f87a51866c91d"
            ],
            [
                "428f6e140e764550",
                "bc34547580822004",
                "cde3d5c964af9ce5"
            ]
        ]
    },
    {
        "id": "428f6e140e764550",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "Get input account",
        "func": "msg.payload = msg.payload.user\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2100,
        "wires": [
            [
                "7812155d4f3d8392"
            ]
        ]
    },
    {
        "id": "bc34547580822004",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "Create account success message",
        "func": "msg.payload = msg.payload.success\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1980,
        "wires": [
            [
                "199c501cae4237e6"
            ]
        ]
    },
    {
        "id": "df3f87a51866c91d",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "Create account failure message",
        "func": "msg.payload = msg.payload.failure\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1920,
        "wires": [
            [
                "199c501cae4237e6"
            ]
        ]
    },
    {
        "id": "cde3d5c964af9ce5",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "Navigate to Login",
        "func": "msg.payload = {\n    \"tab\": \"Login\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 2040,
        "wires": [
            [
                "db4f4729c1ef3a91"
            ]
        ]
    },
    {
        "id": "db4f4729c1ef3a91",
        "type": "ui_ui_control",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "",
        "events": "all",
        "x": 1100,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "5b8851eb1f1cbb6a",
        "type": "comment",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "",
        "info": "Cứ 30s lấy data 1 lần",
        "x": 120,
        "y": 940,
        "wires": []
    },
    {
        "id": "2859584a56237ddd",
        "type": "comment",
        "z": "8cb57750c270cbc8",
        "g": "6121089994c735e9",
        "name": "",
        "info": "Gửi dữ liệu từ ESP qua đây bằng MQTT nên\ndelay cỡ 15-20s do Thingspeak hàng free\nkhông cho push data nhanh",
        "x": 100,
        "y": 100,
        "wires": []
    },
    {
        "id": "55d5c6d50d7899d7",
        "type": "http request",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "Get eaten amount in a day",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2372088/fields/4.json?api_key=KYAW97ZDGX7CCNPF&days=1&timezone=Asia%2FBangkok&sum=daily",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 360,
        "y": 1080,
        "wires": [
            [
                "0d9153855cbefa17"
            ]
        ]
    },
    {
        "id": "0d9153855cbefa17",
        "type": "json",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 570,
        "y": 1080,
        "wires": [
            [
                "14b2cf38376f4f1f"
            ]
        ]
    },
    {
        "id": "14b2cf38376f4f1f",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "Parse data",
        "func": "const entries = msg.payload.feeds\n\nmsg.payload = parseFloat(entries[entries.length -1].field4).toFixed(2)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1080,
        "wires": [
            [
                "6666e9bdad490c91"
            ]
        ]
    },
    {
        "id": "ed507e8142d4bbd5",
        "type": "comment",
        "z": "8cb57750c270cbc8",
        "g": "649ac7994d2c9754",
        "name": "",
        "info": "Login với Register dùng firebase, không\nhash password",
        "x": 120,
        "y": 1620,
        "wires": []
    },
    {
        "id": "3f91e487d7968a3a",
        "type": "inject",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1220,
        "wires": [
            [
                "3d8dd9b84cfd205d",
                "a7661709c3721c12"
            ]
        ]
    },
    {
        "id": "3d8dd9b84cfd205d",
        "type": "http request",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "Get eaten amount in a week",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2372088/fields/4.json?api_key=KYAW97ZDGX7CCNPF&days=7&timezone=Asia%2FBangkok&sum=daily",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 360,
        "y": 1360,
        "wires": [
            [
                "1c16077007266a4e"
            ]
        ]
    },
    {
        "id": "1c16077007266a4e",
        "type": "json",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 570,
        "y": 1360,
        "wires": [
            [
                "57be545be5ad6674",
                "a00e3e18af3e9399"
            ]
        ]
    },
    {
        "id": "57be545be5ad6674",
        "type": "debug",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 1420,
        "wires": []
    },
    {
        "id": "23069d03f0e68966",
        "type": "comment",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "",
        "info": "Cứ 1h lấy data 1 lần",
        "x": 120,
        "y": 1180,
        "wires": []
    },
    {
        "id": "a00e3e18af3e9399",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "Parse data",
        "func": "const entries = msg.payload.feeds\n\nconst data = entries.map((entry) => {\n    if (!isNaN(parseFloat(entry.field4))){\n        return parseFloat(entry.field4)\n    }\n    else{\n        return 0\n    }\n})\n\nconst labels = entries.map((entry) => {\n    const day = entry.created_at.substr(8, 2)\n    const month = entry.created_at.substr(5, 2)\n    const year = entry.created_at.substr(0, 4)\n    return `${day}-${month}-${year}`\n})\n\nmsg.payload = [{\n    \"series\": [\"Total amount\"],\n    \"data\": [[...data]],\n    \"labels\": [...labels]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1360,
        "wires": [
            [
                "7f0fcee1ac394ee1"
            ]
        ]
    },
    {
        "id": "7f0fcee1ac394ee1",
        "type": "ui_chart",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "",
        "group": "f434af1b842eed99",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Eaten Amount",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "monotone",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 920,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "a7661709c3721c12",
        "type": "http request",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "Get 7-day data from ThingSpeak",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2372088/feeds.json?api_key=KYAW97ZDGX7CCNPF&days=7&timezone=Asia%2FBangkok&timescale=10",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 1220,
        "wires": [
            [
                "04d7cbf598a02aad"
            ]
        ]
    },
    {
        "id": "04d7cbf598a02aad",
        "type": "json",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 570,
        "y": 1220,
        "wires": [
            [
                "dde3b3ea5cbdd9c9"
            ]
        ]
    },
    {
        "id": "9a76d01205eba4ef",
        "type": "debug",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1180,
        "wires": []
    },
    {
        "id": "dde3b3ea5cbdd9c9",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "Filter data",
        "func": "const data = msg.payload.feeds\n\nmsg.payload = data.filter((entry) => {\n    return (entry.field2 !== null && entry.field3 !== null)\n})\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1220,
        "wires": [
            [
                "9a76d01205eba4ef",
                "efb9737f417a240a",
                "c312e3dc1586f626"
            ]
        ]
    },
    {
        "id": "efb9737f417a240a",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "Parse data",
        "func": "const entries = msg.payload\n\nconst data = entries.map((entry) => {\n    return parseFloat(entry.field2)\n})\n\nconst labels = entries.map((entry) => {\n    const day = entry.created_at.substr(8, 2)\n    const month = entry.created_at.substr(5, 2)\n    const time = entry.created_at.substr(11, 5)\n    return `${day}-${month} ${time}`\n})\n\nmsg.payload = [{\n    \"series\": [\"Amount\"],\n    \"data\": [[...data]],\n    \"labels\": [...labels]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1220,
        "wires": [
            [
                "22d47acdf3a47b3c"
            ]
        ]
    },
    {
        "id": "22d47acdf3a47b3c",
        "type": "ui_chart",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "",
        "group": "f434af1b842eed99",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Food Container",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "monotone",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1080,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "c312e3dc1586f626",
        "type": "function",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "Parse data",
        "func": "const entries = msg.payload\n\nconst data = entries.map((entry) => {\n    return parseFloat(entry.field3)\n})\n\nconst labels = entries.map((entry) => {\n    const day = entry.created_at.substr(8, 2)\n    const month = entry.created_at.substr(5, 2)\n    const time = entry.created_at.substr(11, 5)\n    return `${day}-${month} ${time}`\n})\n\nmsg.payload = [{\n    \"series\": [\"Amount\"],\n    \"data\": [[...data]],\n    \"labels\": [...labels]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1280,
        "wires": [
            [
                "ba5e525c52e43859"
            ]
        ]
    },
    {
        "id": "ba5e525c52e43859",
        "type": "ui_chart",
        "z": "8cb57750c270cbc8",
        "g": "32b9074e20077c31",
        "name": "",
        "group": "f434af1b842eed99",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Food Plate",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "monotone",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1070,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "d1c19663685c132c",
        "type": "ui_form",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "",
        "label": "Monday",
        "group": "9cfe263e84390285",
        "order": 1,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "Meal 1",
                "value": "meal_1",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_1",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 2",
                "value": "meal_2",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_2",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 3",
                "value": "meal_3",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_3",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "meal_1": "",
            "amount_1": "",
            "meal_2": "",
            "amount_2": "",
            "meal_3": "",
            "amount_3": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 100,
        "y": 100,
        "wires": [
            [
                "19860ffcae497985"
            ]
        ]
    },
    {
        "id": "b3f64b71beadf503",
        "type": "ui_form",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "",
        "label": "Tuesday",
        "group": "9cfe263e84390285",
        "order": 2,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "Meal 1",
                "value": "meal_1",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_1",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 2",
                "value": "meal_2",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_2",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 3",
                "value": "meal_3",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_3",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "meal_1": "",
            "amount_1": "",
            "meal_2": "",
            "amount_2": "",
            "meal_3": "",
            "amount_3": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 100,
        "y": 140,
        "wires": [
            [
                "4706b12e596afbb6"
            ]
        ]
    },
    {
        "id": "4706b12e596afbb6",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "parse data",
        "func": "const day = \"Tue\"\nconst time = []\nconst quantity = []\nfor (let i = 1; i <= 3; i++) {\n    const mealKey = `meal_${i}`;\n    const amountKey = `amount_${i}`;\n    const mealValue = msg.payload[mealKey];\n    const amountValue = msg.payload[amountKey];\n\n    if (mealValue !== null && amountValue !== null) {\n        // Parse thời gian để chỉ lấy giờ và phút\n        const parsedTime = new Date(mealValue);\n        const formattedTime = `${parsedTime.getHours()}:${parsedTime.getMinutes()}`;\n        time.push(formattedTime);\n        quantity.push(amountValue);\n    }\n}\nmsg.payload = {\n    day: day,\n    time: time,\n    quantity: quantity\n}\nmsg.topic = \"data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 140,
        "wires": [
            [
                "76fd94264ed5903d",
                "cd338edfa99dfe11"
            ]
        ]
    },
    {
        "id": "513c01d17e405f21",
        "type": "ui_form",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "",
        "label": "Wednesday",
        "group": "9cfe263e84390285",
        "order": 3,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "Meal 1",
                "value": "meal_1",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_1",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 2",
                "value": "meal_2",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_2",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 3",
                "value": "meal_3",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_3",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "meal_1": "",
            "amount_1": "",
            "meal_2": "",
            "amount_2": "",
            "meal_3": "",
            "amount_3": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "a519b7a5789e7f8f"
            ]
        ]
    },
    {
        "id": "a519b7a5789e7f8f",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "parse data",
        "func": "const day = \"Wed\"\nconst time = []\nconst quantity = []\nfor (let i = 1; i <= 3; i++) {\n    const mealKey = `meal_${i}`;\n    const amountKey = `amount_${i}`;\n    const mealValue = msg.payload[mealKey];\n    const amountValue = msg.payload[amountKey];\n\n    if (mealValue !== null && amountValue !== null) {\n        // Parse thời gian để chỉ lấy giờ và phút\n        const parsedTime = new Date(mealValue);\n        const formattedTime = `${parsedTime.getHours()}:${parsedTime.getMinutes()}`;\n        time.push(formattedTime);\n        quantity.push(amountValue);\n    }\n}\nmsg.payload = {\n    day: day,\n    time: time,\n    quantity: quantity\n}\nmsg.topic = \"data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 180,
        "wires": [
            [
                "cd338edfa99dfe11",
                "76fd94264ed5903d"
            ]
        ]
    },
    {
        "id": "0e865ee211eb49f6",
        "type": "ui_form",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "",
        "label": "Thursday",
        "group": "9cfe263e84390285",
        "order": 4,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "Meal 1",
                "value": "meal_1",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_1",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 2",
                "value": "meal_2",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_2",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 3",
                "value": "meal_3",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_3",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "meal_1": "",
            "amount_1": "",
            "meal_2": "",
            "amount_2": "",
            "meal_3": "",
            "amount_3": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 100,
        "y": 220,
        "wires": [
            [
                "3a48c50918db5446"
            ]
        ]
    },
    {
        "id": "3a48c50918db5446",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "parse data",
        "func": "const day = \"Thu\"\nconst time = []\nconst quantity = []\nfor (let i = 1; i <= 3; i++) {\n    const mealKey = `meal_${i}`;\n    const amountKey = `amount_${i}`;\n    const mealValue = msg.payload[mealKey];\n    const amountValue = msg.payload[amountKey];\n\n    if (mealValue !== null && amountValue !== null) {\n        // Parse thời gian để chỉ lấy giờ và phút\n        const parsedTime = new Date(mealValue);\n        const formattedTime = `${parsedTime.getHours()}:${parsedTime.getMinutes()}`;\n        time.push(formattedTime);\n        quantity.push(amountValue);\n    }\n}\nmsg.payload = {\n    day: day,\n    time: time,\n    quantity: quantity\n}\nmsg.topic = \"data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 220,
        "wires": [
            [
                "cd338edfa99dfe11",
                "76fd94264ed5903d"
            ]
        ]
    },
    {
        "id": "cf96d6359eaa35bd",
        "type": "ui_form",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "",
        "label": "Friday",
        "group": "9cfe263e84390285",
        "order": 5,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "Meal 1",
                "value": "meal_1",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_1",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 2",
                "value": "meal_2",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_2",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 3",
                "value": "meal_3",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_3",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "meal_1": "",
            "amount_1": "",
            "meal_2": "",
            "amount_2": "",
            "meal_3": "",
            "amount_3": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 90,
        "y": 260,
        "wires": [
            [
                "4cf228a07a8b89da"
            ]
        ]
    },
    {
        "id": "4cf228a07a8b89da",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "parse data",
        "func": "const day = \"Fri\"\nconst time = []\nconst quantity = []\nfor (let i = 1; i <= 3; i++) {\n    const mealKey = `meal_${i}`;\n    const amountKey = `amount_${i}`;\n    const mealValue = msg.payload[mealKey];\n    const amountValue = msg.payload[amountKey];\n\n    if (mealValue !== null && amountValue !== null) {\n        // Parse thời gian để chỉ lấy giờ và phút\n        const parsedTime = new Date(mealValue);\n        const formattedTime = `${parsedTime.getHours()}:${parsedTime.getMinutes()}`;\n        time.push(formattedTime);\n        quantity.push(amountValue);\n    }\n}\nmsg.payload = {\n    day: day,\n    time: time,\n    quantity: quantity\n}\nmsg.topic = \"data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 260,
        "wires": [
            [
                "cd338edfa99dfe11",
                "76fd94264ed5903d"
            ]
        ]
    },
    {
        "id": "d14e5053f9b0b4bb",
        "type": "ui_form",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "",
        "label": "Saturday",
        "group": "9cfe263e84390285",
        "order": 6,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "Meal 1",
                "value": "meal_1",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_1",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 2",
                "value": "meal_2",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_2",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 3",
                "value": "meal_3",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_3",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "meal_1": "",
            "amount_1": "",
            "meal_2": "",
            "amount_2": "",
            "meal_3": "",
            "amount_3": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 100,
        "y": 300,
        "wires": [
            [
                "003b8f21b81dd47e"
            ]
        ]
    },
    {
        "id": "003b8f21b81dd47e",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "parse data",
        "func": "const day = \"Sat\"\nconst time = []\nconst quantity = []\nfor (let i = 1; i <= 3; i++) {\n    const mealKey = `meal_${i}`;\n    const amountKey = `amount_${i}`;\n    const mealValue = msg.payload[mealKey];\n    const amountValue = msg.payload[amountKey];\n\n    if (mealValue !== null && amountValue !== null) {\n        // Parse thời gian để chỉ lấy giờ và phút\n        const parsedTime = new Date(mealValue);\n        const formattedTime = `${parsedTime.getHours()}:${parsedTime.getMinutes()}`;\n        time.push(formattedTime);\n        quantity.push(amountValue);\n    }\n}\nmsg.payload = {\n    day: day,\n    time: time,\n    quantity: quantity\n}\nmsg.topic = \"data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 300,
        "wires": [
            [
                "cd338edfa99dfe11",
                "76fd94264ed5903d"
            ]
        ]
    },
    {
        "id": "1c2438192f9b7152",
        "type": "ui_form",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "",
        "label": "Sunday",
        "group": "9cfe263e84390285",
        "order": 7,
        "width": 6,
        "height": 1,
        "options": [
            {
                "label": "Meal 1",
                "value": "meal_1",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_1",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 2",
                "value": "meal_2",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_2",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "Meal 3",
                "value": "meal_3",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Food",
                "value": "amount_3",
                "type": "number",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "meal_1": "",
            "amount_1": "",
            "meal_2": "",
            "amount_2": "",
            "meal_3": "",
            "amount_3": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 100,
        "y": 340,
        "wires": [
            [
                "00737ebbdb7354cd"
            ]
        ]
    },
    {
        "id": "00737ebbdb7354cd",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "parse data",
        "func": "const day = \"Sun\"\nconst time = []\nconst quantity = []\nfor (let i = 1; i <= 3; i++) {\n    const mealKey = `meal_${i}`;\n    const amountKey = `amount_${i}`;\n    const mealValue = msg.payload[mealKey];\n    const amountValue = msg.payload[amountKey];\n\n    if (mealValue !== null && amountValue !== null) {\n        // Parse thời gian để chỉ lấy giờ và phút\n        const parsedTime = new Date(mealValue);\n        const formattedTime = `${parsedTime.getHours()}:${parsedTime.getMinutes()}`;\n        time.push(formattedTime);\n        quantity.push(amountValue);\n    }\n}\nmsg.payload = {\n    day: day,\n    time: time,\n    quantity: quantity\n}\nmsg.topic = \"data\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 340,
        "wires": [
            [
                "cd338edfa99dfe11",
                "76fd94264ed5903d"
            ]
        ]
    },
    {
        "id": "44dc0c6324261b21",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "name": "function 15",
        "func": "var data = msg.payload;\nvar daydata = [];\n\nfunction formatNumber(number) {\n    return number < 10 ? `0${number}` : `${number}`;\n}\n\nfor (const key in data) {\n    if (data.hasOwnProperty(key)) {\n        var currentItem = data[key];\n        if (currentItem.day === \"Mon\") {\n            currentItem.day = \"Monday\"\n            const formattedTimes = currentItem.time.map((time, index) => {\n                const quantity = currentItem.quantity[index] || 0;\n\n                // Parse thời gian để chỉ lấy giờ và phút\n                const parsedTime = time ? time.split(\":\") : null;\n                const formattedHour = parsedTime ? formatNumber(parseInt(parsedTime[0])) : \"\";\n                const formattedMinute = parsedTime ? formatNumber(parseInt(parsedTime[1])) : \"\";\n                const formattedHourMinute = `${formattedHour}h${formattedMinute}`;\n\n                return `<div style=\"margin-top: 15px; padding: 15px; background-color: #f9f9f9; border: 2px solid #e0e0e0; border-radius: 8px; color: #333; font-size: 1.3em;\"><strong>${formattedHourMinute}</strong>: ${quantity}g</div>`;\n            });\n\n            daydata.push({\n                id: key,\n                title: `<span style=\"font-size: 2em; font-weight: bold; color: #333;\">${currentItem.day}</span>`,\n                description: formattedTimes.join(\"\"),\n                quantity: currentItem.quantity || [],\n                time: currentItem.time || []\n            });\n        }\n    }\n}\n\nmsg.payload = daydata;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 620,
        "wires": [
            [
                "e01e1ba4ab358e48"
            ]
        ]
    },
    {
        "id": "e01e1ba4ab358e48",
        "type": "ui_list",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "group": "4c5c83bbf054b470",
        "name": "Monday",
        "order": 1,
        "width": 5,
        "height": 5,
        "lineType": "three",
        "actionType": "none",
        "allowHTML": true,
        "outputs": 0,
        "topic": "schedule",
        "x": 740,
        "y": 620,
        "wires": []
    },
    {
        "id": "5dc59026099f274c",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "function 17",
        "func": "msg.payload = Object.keys(msg.payload)[0]\nmsg.topic = \"id\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 360,
        "wires": [
            [
                "76fd94264ed5903d"
            ]
        ]
    },
    {
        "id": "cd338edfa99dfe11",
        "type": "firebase-get",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "",
        "constraint": {
            "orderByChild": "day",
            "equalTo": {
                "value": "payload.day",
                "type": "msg"
            }
        },
        "database": "72efe316941c7cdb",
        "outputType": "auto",
        "passThrough": false,
        "path": "schedule",
        "pathType": "str",
        "useConstraint": true,
        "x": 500,
        "y": 360,
        "wires": [
            [
                "5dc59026099f274c"
            ]
        ]
    },
    {
        "id": "76fd94264ed5903d",
        "type": "join",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 810,
        "y": 260,
        "wires": [
            [
                "db46a611083ffe2d"
            ]
        ]
    },
    {
        "id": "db46a611083ffe2d",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "function 18",
        "func": "const path = 'schedule/' + msg.payload.id\n\nmsg.payload = msg.payload.data\nmsg.topic = path\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 260,
        "wires": [
            [
                "206519fbd154b5d3"
            ]
        ]
    },
    {
        "id": "206519fbd154b5d3",
        "type": "firebase-out",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "",
        "database": "72efe316941c7cdb",
        "path": "topic",
        "pathType": "msg",
        "priority": 1,
        "queryType": "update",
        "x": 1120,
        "y": 260,
        "wires": []
    },
    {
        "id": "19860ffcae497985",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "b7d59f86b2ee88cc",
        "name": "parse data",
        "func": "const day = \"Mon\";\nconst time = [];\nconst quantity = [];\n\nfor (let i = 1; i <= 3; i++) {\n    const mealKey = `meal_${i}`;\n    const amountKey = `amount_${i}`;\n\n    const mealValue = msg.payload[mealKey];\n    const amountValue = msg.payload[amountKey];\n\n    if (mealValue !== null && amountValue !== null) {\n        // Parse thời gian để chỉ lấy giờ và phút\n        const parsedTime = new Date(mealValue);\n        const formattedTime = `${parsedTime.getHours()}:${parsedTime.getMinutes()}`;\n        time.push(formattedTime);\n        quantity.push(amountValue);\n    }\n}\n\nmsg.payload = {\n    day: day,\n    time: time,\n    quantity: quantity\n\n};\nmsg.topic = \"data\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 100,
        "wires": [
            [
                "cd338edfa99dfe11",
                "76fd94264ed5903d"
            ]
        ]
    },
    {
        "id": "0114a70e2aba719e",
        "type": "mqtt out",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "name": "",
        "topic": "/PetFeeder/schedule",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "989a90dfdbfa79d0",
        "x": 940,
        "y": 500,
        "wires": []
    },
    {
        "id": "ac1e87f2d19cf745",
        "type": "inject",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "3a78483fd287a2ef"
            ]
        ]
    },
    {
        "id": "3a78483fd287a2ef",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "name": "Get current date to query",
        "func": "var days = ['Sun', 'Mon', 'Tues', 'Wed', 'Thu', 'Fri', 'Sat'];\n\nvar now = new Date();\nvar day = days[now.getDay()];\nmsg.payload = day;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 500,
        "wires": [
            [
                "36d9ae9f6df43ffe"
            ]
        ]
    },
    {
        "id": "36d9ae9f6df43ffe",
        "type": "firebase-get",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "name": "",
        "constraint": {
            "orderByChild": "day",
            "equalTo": {
                "value": "payload",
                "type": "msg"
            }
        },
        "database": "72efe316941c7cdb",
        "outputType": "auto",
        "passThrough": false,
        "path": "schedule",
        "pathType": "str",
        "useConstraint": true,
        "x": 540,
        "y": 500,
        "wires": [
            [
                "2722d0cf0eecb70c"
            ]
        ]
    },
    {
        "id": "2722d0cf0eecb70c",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "name": "get schedule of today",
        "func": "const data = msg.payload\n\nfor (const key in data) {\n    if (data.hasOwnProperty(key)) {\n        msg.payload = data[key]\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 500,
        "wires": [
            [
                "0114a70e2aba719e"
            ]
        ]
    },
    {
        "id": "9216c7216f4dbd6b",
        "type": "complete",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "name": "",
        "scope": [
            "206519fbd154b5d3"
        ],
        "uncaught": false,
        "x": 130,
        "y": 560,
        "wires": [
            [
                "3a78483fd287a2ef",
                "e43f52cae091f6d2",
                "61b25ea218b82461"
            ]
        ]
    },
    {
        "id": "e43f52cae091f6d2",
        "type": "firebase-get",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "name": "",
        "constraint": {},
        "database": "72efe316941c7cdb",
        "outputType": "auto",
        "passThrough": false,
        "path": "schedule",
        "pathType": "str",
        "useConstraint": false,
        "x": 340,
        "y": 620,
        "wires": [
            [
                "44dc0c6324261b21",
                "3316fb2b988f4db7",
                "7f449d3e2db723d6",
                "1282fc76da8a7f6c",
                "12090d0ddb697fd6",
                "c8f54d5b12df7269",
                "bb8c3a40094e9c3f"
            ]
        ]
    },
    {
        "id": "6ea659e13ac71ceb",
        "type": "inject",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "e43f52cae091f6d2"
            ]
        ]
    },
    {
        "id": "3316fb2b988f4db7",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "name": "function 19",
        "func": "var data = msg.payload;\nvar daydata = [];\n\nfunction formatNumber(number) {\n    return number < 10 ? `0${number}` : `${number}`;\n}\n\nfor (const key in data) {\n    if (data.hasOwnProperty(key)) {\n        var currentItem = data[key];\n        if (currentItem.day === \"Tue\") {\n            currentItem.day = \"Tuesday\"\n            const formattedTimes = currentItem.time.map((time, index) => {\n                const quantity = currentItem.quantity[index] || 0;\n\n                // Parse thời gian để chỉ lấy giờ và phút\n                const parsedTime = time ? time.split(\":\") : null;\n                const formattedHour = parsedTime ? formatNumber(parseInt(parsedTime[0])) : \"\";\n                const formattedMinute = parsedTime ? formatNumber(parseInt(parsedTime[1])) : \"\";\n                const formattedHourMinute = `${formattedHour}h${formattedMinute}`;\n\n                return `<div style=\"margin-top: 15px; padding: 15px; background-color: #f9f9f9; border: 2px solid #e0e0e0; border-radius: 8px; color: #333; font-size: 1.3em;\"><strong>${formattedHourMinute}</strong>: ${quantity}g</div>`;\n            });\n\n            daydata.push({\n                id: key,\n                title: `<span style=\"font-size: 2em; font-weight: bold; color: #333;\">${currentItem.day}</span>`,\n                description: formattedTimes.join(\"\"),\n                quantity: currentItem.quantity || [],\n                time: currentItem.time || []\n            });\n        }\n    }\n}\n\nmsg.payload = daydata;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 660,
        "wires": [
            [
                "d0ed56cf44098720"
            ]
        ]
    },
    {
        "id": "d0ed56cf44098720",
        "type": "ui_list",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "group": "4c5c83bbf054b470",
        "name": "Tuesday",
        "order": 3,
        "width": 5,
        "height": 5,
        "lineType": "three",
        "actionType": "none",
        "allowHTML": true,
        "outputs": 0,
        "topic": "schedule",
        "x": 740,
        "y": 660,
        "wires": []
    },
    {
        "id": "7f449d3e2db723d6",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "name": "function 20",
        "func": "var data = msg.payload;\nvar daydata = [];\n\nfunction formatNumber(number) {\n    return number < 10 ? `0${number}` : `${number}`;\n}\n\nfor (const key in data) {\n    if (data.hasOwnProperty(key)) {\n        var currentItem = data[key];\n        if (currentItem.day === \"Wed\") {\n            currentItem.day = \"Wednesday\"\n            const formattedTimes = currentItem.time.map((time, index) => {\n                const quantity = currentItem.quantity[index] || 0;\n\n                // Parse thời gian để chỉ lấy giờ và phút\n                const parsedTime = time ? time.split(\":\") : null;\n                const formattedHour = parsedTime ? formatNumber(parseInt(parsedTime[0])) : \"\";\n                const formattedMinute = parsedTime ? formatNumber(parseInt(parsedTime[1])) : \"\";\n                const formattedHourMinute = `${formattedHour}h${formattedMinute}`;\n\n                return `<div style=\"margin-top: 15px; padding: 15px; background-color: #f9f9f9; border: 2px solid #e0e0e0; border-radius: 8px; color: #333; font-size: 1.3em;\"><strong>${formattedHourMinute}</strong>: ${quantity}g</div>`;\n            });\n\n            daydata.push({\n                id: key,\n                title: `<span style=\"font-size: 2em; font-weight: bold; color: #333;\">${currentItem.day}</span>`,\n                description: formattedTimes.join(\"\"),\n                quantity: currentItem.quantity || [],\n                time: currentItem.time || []\n            });\n        }\n    }\n}\n\nmsg.payload = daydata;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 700,
        "wires": [
            [
                "477b0a2d1cf8b8dc"
            ]
        ]
    },
    {
        "id": "477b0a2d1cf8b8dc",
        "type": "ui_list",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "group": "4c5c83bbf054b470",
        "name": "Wednesday",
        "order": 5,
        "width": 5,
        "height": 5,
        "lineType": "three",
        "actionType": "none",
        "allowHTML": true,
        "outputs": 0,
        "topic": "schedule",
        "x": 750,
        "y": 700,
        "wires": []
    },
    {
        "id": "1282fc76da8a7f6c",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "name": "function 21",
        "func": "var data = msg.payload;\nvar daydata = [];\n\nfunction formatNumber(number) {\n    return number < 10 ? `0${number}` : `${number}`;\n}\n\nfor (const key in data) {\n    if (data.hasOwnProperty(key)) {\n        var currentItem = data[key];\n        if (currentItem.day === \"Thu\") {\n            currentItem.day = \"Thursday\"\n            const formattedTimes = currentItem.time.map((time, index) => {\n                const quantity = currentItem.quantity[index] || 0;\n\n                // Parse thời gian để chỉ lấy giờ và phút\n                const parsedTime = time ? time.split(\":\") : null;\n                const formattedHour = parsedTime ? formatNumber(parseInt(parsedTime[0])) : \"\";\n                const formattedMinute = parsedTime ? formatNumber(parseInt(parsedTime[1])) : \"\";\n                const formattedHourMinute = `${formattedHour}h${formattedMinute}`;\n\n                return `<div style=\"margin-top: 15px; padding: 15px; background-color: #f9f9f9; border: 2px solid #e0e0e0; border-radius: 8px; color: #333; font-size: 1.3em;\"><strong>${formattedHourMinute}</strong>: ${quantity}g</div>`;\n            });\n\n            daydata.push({\n                id: key,\n                title: `<span style=\"font-size: 2em; font-weight: bold; color: #333;\">${currentItem.day}</span>`,\n                description: formattedTimes.join(\"\"),\n                quantity: currentItem.quantity || [],\n                time: currentItem.time || []\n            });\n        }\n    }\n}\n\nmsg.payload = daydata;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 740,
        "wires": [
            [
                "07330db0f2a9ca2b"
            ]
        ]
    },
    {
        "id": "07330db0f2a9ca2b",
        "type": "ui_list",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "group": "4c5c83bbf054b470",
        "name": "Thursday",
        "order": 15,
        "width": 5,
        "height": 5,
        "lineType": "three",
        "actionType": "none",
        "allowHTML": true,
        "outputs": 0,
        "topic": "schedule",
        "x": 740,
        "y": 740,
        "wires": []
    },
    {
        "id": "12090d0ddb697fd6",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "name": "function 22",
        "func": "var data = msg.payload;\nvar daydata = [];\n\nfunction formatNumber(number) {\n    return number < 10 ? `0${number}` : `${number}`;\n}\n\nfor (const key in data) {\n    if (data.hasOwnProperty(key)) {\n        var currentItem = data[key];\n        if (currentItem.day === \"Fri\") {\n            currentItem.day = \"Friday\"\n            const formattedTimes = currentItem.time.map((time, index) => {\n                const quantity = currentItem.quantity[index] || 0;\n\n                // Parse thời gian để chỉ lấy giờ và phút\n                const parsedTime = time ? time.split(\":\") : null;\n                const formattedHour = parsedTime ? formatNumber(parseInt(parsedTime[0])) : \"\";\n                const formattedMinute = parsedTime ? formatNumber(parseInt(parsedTime[1])) : \"\";\n                const formattedHourMinute = `${formattedHour}h${formattedMinute}`;\n\n                return `<div style=\"margin-top: 15px; padding: 15px; background-color: #f9f9f9; border: 2px solid #e0e0e0; border-radius: 8px; color: #333; font-size: 1.3em;\"><strong>${formattedHourMinute}</strong>: ${quantity}g</div>`;\n            });\n\n            daydata.push({\n                id: key,\n                title: `<span style=\"font-size: 2em; font-weight: bold; color: #333;\">${currentItem.day}</span>`,\n                description: formattedTimes.join(\"\"),\n                quantity: currentItem.quantity || [],\n                time: currentItem.time || []\n            });\n        }\n    }\n}\n\nmsg.payload = daydata;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 780,
        "wires": [
            [
                "7d2f3462eec5b23f"
            ]
        ]
    },
    {
        "id": "7d2f3462eec5b23f",
        "type": "ui_list",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "group": "4c5c83bbf054b470",
        "name": "Friday",
        "order": 17,
        "width": 5,
        "height": 5,
        "lineType": "three",
        "actionType": "none",
        "allowHTML": true,
        "outputs": 0,
        "topic": "schedule",
        "x": 730,
        "y": 780,
        "wires": []
    },
    {
        "id": "c8f54d5b12df7269",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "name": "function 23",
        "func": "var data = msg.payload;\nvar daydata = [];\n\nfunction formatNumber(number) {\n    return number < 10 ? `0${number}` : `${number}`;\n}\n\nfor (const key in data) {\n    if (data.hasOwnProperty(key)) {\n        var currentItem = data[key];\n        if (currentItem.day === \"Sat\") {\n            currentItem.day = \"Saturday\"\n            const formattedTimes = currentItem.time.map((time, index) => {\n                const quantity = currentItem.quantity[index] || 0;\n\n                // Parse thời gian để chỉ lấy giờ và phút\n                const parsedTime = time ? time.split(\":\") : null;\n                const formattedHour = parsedTime ? formatNumber(parseInt(parsedTime[0])) : \"\";\n                const formattedMinute = parsedTime ? formatNumber(parseInt(parsedTime[1])) : \"\";\n                const formattedHourMinute = `${formattedHour}h${formattedMinute}`;\n\n                return `<div style=\"margin-top: 15px; padding: 15px; background-color: #f9f9f9; border: 2px solid #e0e0e0; border-radius: 8px; color: #333; font-size: 1.3em;\"><strong>${formattedHourMinute}</strong>: ${quantity}g</div>`;\n            });\n\n            daydata.push({\n                id: key,\n                title: `<span style=\"font-size: 2em; font-weight: bold; color: #333;\">${currentItem.day}</span>`,\n                description: formattedTimes.join(\"\"),\n                quantity: currentItem.quantity || [],\n                time: currentItem.time || []\n            });\n        }\n    }\n}\n\nmsg.payload = daydata;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 820,
        "wires": [
            [
                "c3fb45723be792bc"
            ]
        ]
    },
    {
        "id": "c3fb45723be792bc",
        "type": "ui_list",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "group": "4c5c83bbf054b470",
        "name": "Saturday",
        "order": 19,
        "width": 5,
        "height": 5,
        "lineType": "three",
        "actionType": "none",
        "allowHTML": true,
        "outputs": 0,
        "topic": "schedule",
        "x": 740,
        "y": 820,
        "wires": []
    },
    {
        "id": "bb8c3a40094e9c3f",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "name": "function 24",
        "func": "var data = msg.payload;\nvar daydata = [];\n\nfunction formatNumber(number) {\n    return number < 10 ? `0${number}` : `${number}`;\n}\n\nfor (const key in data) {\n    if (data.hasOwnProperty(key)) {\n        var currentItem = data[key];\n        if (currentItem.day === \"Sun\") {\n            currentItem.day = \"Sunday\"\n            const formattedTimes = currentItem.time.map((time, index) => {\n                const quantity = currentItem.quantity[index] || 0;\n\n                // Parse thời gian để chỉ lấy giờ và phút\n                const parsedTime = time ? time.split(\":\") : null;\n                const formattedHour = parsedTime ? formatNumber(parseInt(parsedTime[0])) : \"\";\n                const formattedMinute = parsedTime ? formatNumber(parseInt(parsedTime[1])) : \"\";\n                const formattedHourMinute = `${formattedHour}h${formattedMinute}`;\n\n                return `<div style=\"margin-top: 15px; padding: 15px; background-color: #f9f9f9; border: 2px solid #e0e0e0; border-radius: 8px; color: #333; font-size: 1.3em;\"><strong>${formattedHourMinute}</strong>: ${quantity}g</div>`;\n            });\n\n            daydata.push({\n                id: key,\n                title: `<span style=\"font-size: 2em; font-weight: bold; color: #333;\">${currentItem.day}</span>`,\n                description: formattedTimes.join(\"\"),\n                quantity: currentItem.quantity || [],\n                time: currentItem.time || []\n            });\n        }\n    }\n}\n\nmsg.payload = daydata;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 860,
        "wires": [
            [
                "0076cbcc91bf9d4f"
            ]
        ]
    },
    {
        "id": "0076cbcc91bf9d4f",
        "type": "ui_list",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "group": "4c5c83bbf054b470",
        "name": "Sunday",
        "order": 30,
        "width": 5,
        "height": 4,
        "lineType": "three",
        "actionType": "none",
        "allowHTML": true,
        "outputs": 0,
        "topic": "schedule",
        "x": 740,
        "y": 860,
        "wires": []
    },
    {
        "id": "3c32b200476e63e2",
        "type": "ui_toast",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "position": "bottom right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Notification",
        "name": "",
        "x": 530,
        "y": 560,
        "wires": []
    },
    {
        "id": "61b25ea218b82461",
        "type": "function",
        "z": "59541606100e1c83",
        "g": "3a7e8f5475508b6f",
        "name": "function 25",
        "func": "msg.payload = \"Schedule have been updated!\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 560,
        "wires": [
            [
                "3c32b200476e63e2"
            ]
        ]
    }
]