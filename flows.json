[
    {
        "id": "1c38bb45ab2e35d1",
        "type": "tab",
        "label": "Hoang Lam",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bc72179531874d62",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#000000",
                "baseFont": "Lucida Sans Typewriter,Lucida Console,Monaco,monospace",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": true
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": true
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "4c5c83bbf054b470",
        "type": "ui_group",
        "name": "Login",
        "tab": "77c1c2640f0c5d2f",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0aaa3500562561ea",
        "type": "ui_group",
        "name": "Food Container",
        "tab": "8d66d040c5a991d1",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2f7ae1d9dbb40962",
        "type": "ui_group",
        "name": "Food Plate",
        "tab": "8d66d040c5a991d1",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "df7f1b0707f0384d",
        "type": "ui_group",
        "name": "Manual Feeding",
        "tab": "8d66d040c5a991d1",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "989a90dfdbfa79d0",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "77c1c2640f0c5d2f",
        "type": "ui_tab",
        "name": "Login",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "8d66d040c5a991d1",
        "type": "ui_tab",
        "name": "Home",
        "icon": "fa-home ",
        "order": 3,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "aa6de7dd52d2548b",
        "type": "ui_tab",
        "name": "Statistics",
        "icon": "fa-area-chart ",
        "order": 4,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "2d66c14763805337",
        "type": "ui_group",
        "name": "1-day Statistics",
        "tab": "aa6de7dd52d2548b",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "36a7cc5a3406a57d",
        "type": "ui_group",
        "name": "Test",
        "tab": "aa6de7dd52d2548b",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "72efe316941c7cdb",
        "type": "database-config",
        "name": "IoTUserData",
        "authType": "anonymous",
        "claims": {},
        "createUser": false,
        "useClaims": false
    },
    {
        "id": "9cbf2894d993b243",
        "type": "ui_tab",
        "name": "Register",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "3e45edafd7d05920",
        "type": "ui_group",
        "name": "Register",
        "tab": "9cbf2894d993b243",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a607bff7666abe19",
        "type": "ui_form",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "label": "",
        "group": "4c5c83bbf054b470",
        "order": 4,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": ""
        },
        "payload": "",
        "submit": "Login",
        "cancel": "",
        "topic": "user",
        "topicType": "str",
        "splitLayout": "",
        "className": "",
        "x": 90,
        "y": 1340,
        "wires": [
            [
                "70bbb362f7ce005c",
                "de22f006a567e27c"
            ]
        ]
    },
    {
        "id": "82d606a579c159fe",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Initialization",
        "func": "flow.set(\"amount\", 100)\nflow.set(\"plate_remain\", 0)\nflow.set(\"container_remain_percentage\", 0)\n\n// Flags for ifttt notification\nflow.set(\"noti_50\", true)\nflow.set(\"noti_20\", true)\nflow.set(\"noti_0\", true)\n\nmsg.payload = {\n    \"tabs\": {\n        \"show\": [\"Login\", \"Register\"]\n    },\n    \"tab\": \"Login\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1220,
        "wires": [
            [
                "d57b6c6c90b48677"
            ]
        ]
    },
    {
        "id": "b3c14b6df385da99",
        "type": "inject",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1220,
        "wires": [
            [
                "82d606a579c159fe"
            ]
        ]
    },
    {
        "id": "cc5164423f8aadb9",
        "type": "ui_gauge",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "group": "0aaa3500562561ea",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "donut",
        "title": "Percentage of food left",
        "label": "%",
        "format": "{{msg.payload.percentage}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 640,
        "y": 160,
        "wires": []
    },
    {
        "id": "ed7b0db0ce1b4cca",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Get and calculate container",
        "func": "// msg.payload: Loadcell's value (in gram)\nconst num = parseFloat(msg.payload.toFixed(2))\n// Fixed max weight = 5kg\nconst percentage = parseFloat((num / 5000 * 100).toFixed(2))\n\nmsg.payload = {\n    num: num,\n    percentage: percentage\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 160,
        "wires": [
            [
                "6ff0c52bfb5caa23",
                "cc5164423f8aadb9",
                "d1ce92c6462e2942",
                "e2d9bf1107248d25"
            ]
        ]
    },
    {
        "id": "7c4d59162a01c130",
        "type": "ui_gauge",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "group": "2f7ae1d9dbb40962",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "donut",
        "title": "Percentage of food left",
        "label": "%",
        "format": "{{msg.payload.percentage}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 640,
        "y": 400,
        "wires": []
    },
    {
        "id": "4ca25683ea82e5cc",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Get and calculate plate",
        "func": "// msg.payload = Loadcell's value (in gram)\nconst num = parseFloat(msg.payload.toFixed(2))\n// Fixed max weight = 1kg\nconst percentage = parseFloat((num / 1000 * 100).toFixed(2))\n\nmsg.payload = {\n    num: num,\n    percentage: percentage\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 380,
        "wires": [
            [
                "7c4d59162a01c130",
                "68f10b1c9fb52097",
                "49d53ceebd9ca4c1",
                "ab9630d548df2c2c"
            ]
        ]
    },
    {
        "id": "6ff0c52bfb5caa23",
        "type": "ui_text",
        "z": "1c38bb45ab2e35d1",
        "group": "0aaa3500562561ea",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Weight: ",
        "format": "{{msg.payload.num}} g",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 620,
        "y": 100,
        "wires": []
    },
    {
        "id": "68f10b1c9fb52097",
        "type": "ui_text",
        "z": "1c38bb45ab2e35d1",
        "group": "2f7ae1d9dbb40962",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Weight:",
        "format": "{{msg.payload.num}} g",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 600,
        "y": 340,
        "wires": []
    },
    {
        "id": "fa64a6f63d12ca7c",
        "type": "ui_button",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "group": "df7f1b0707f0384d",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Feed Now",
        "tooltip": "Press this button to feed your pet immediately without schedules",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 760,
        "wires": [
            [
                "51767dd9cb6024ce"
            ]
        ]
    },
    {
        "id": "afc7c333ea471d9e",
        "type": "ui_numeric",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "label": "Food amount:",
        "tooltip": "",
        "group": "df7f1b0707f0384d",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}} g",
        "min": "100",
        "max": "1000",
        "step": "100",
        "className": "",
        "x": 120,
        "y": 700,
        "wires": [
            [
                "4d504605190834ba"
            ]
        ]
    },
    {
        "id": "4d504605190834ba",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "function 5",
        "func": "flow.set(\"amount\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "51767dd9cb6024ce",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "function 6",
        "func": "const container_remain = flow.get(\"container_remain\")\nconst plate_remain = flow.get(\"plate_remain\")\nconst amount_to_feed = flow.get(\"amount\")\n\nif(container_remain < amount_to_feed){\n    msg.payload = {\n        failure: \"Your food container doesn't have enough food!\"\n    }\n}\nelse if(1000 - plate_remain < amount_to_feed){\n    msg.payload = {\n        failure: \"Your plate can't hold that much food!\"\n    }\n}\nelse{\n    msg.payload = {\n        success: \"Preparing to feed your pet!\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 760,
        "wires": [
            [
                "c333457ee145288d"
            ]
        ]
    },
    {
        "id": "f674c0681bada139",
        "type": "ui_toast",
        "z": "1c38bb45ab2e35d1",
        "position": "bottom right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Success notification",
        "x": 780,
        "y": 800,
        "wires": []
    },
    {
        "id": "c333457ee145288d",
        "type": "switch",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "failure",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "success",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 760,
        "wires": [
            [
                "4e2ae08885287596"
            ],
            [
                "027b975b1eafa728"
            ]
        ]
    },
    {
        "id": "027b975b1eafa728",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "function 7",
        "func": "const message = msg.payload.success\nmsg.payload = message\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 800,
        "wires": [
            [
                "f674c0681bada139",
                "749dd1262cb77c5d"
            ]
        ]
    },
    {
        "id": "0aad876dbfdcc052",
        "type": "ui_toast",
        "z": "1c38bb45ab2e35d1",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Failure notification",
        "x": 770,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "4e2ae08885287596",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "function 8",
        "func": "const message = msg.payload.failure\nmsg.payload = message\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 740,
        "wires": [
            [
                "0aad876dbfdcc052"
            ]
        ]
    },
    {
        "id": "a60863c544de65e6",
        "type": "ui_text",
        "z": "1c38bb45ab2e35d1",
        "group": "2f7ae1d9dbb40962",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Your pet has eaten:",
        "format": "{{msg.payload}} g",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1850,
        "y": 400,
        "wires": []
    },
    {
        "id": "afd0d739dc8d04e1",
        "type": "mqtt in",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "topic": "/scale/container",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "989a90dfdbfa79d0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 160,
        "wires": [
            [
                "ed7b0db0ce1b4cca",
                "2a33e09d42ad05ba"
            ]
        ]
    },
    {
        "id": "2a33e09d42ad05ba",
        "type": "debug",
        "z": "1c38bb45ab2e35d1",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 220,
        "wires": []
    },
    {
        "id": "68999a68c2130bc5",
        "type": "mqtt out",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "topic": "/servo",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "989a90dfdbfa79d0",
        "x": 890,
        "y": 860,
        "wires": []
    },
    {
        "id": "749dd1262cb77c5d",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "function 9",
        "func": "msg.payload = flow.get(\"amount\")\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 860,
        "wires": [
            [
                "68999a68c2130bc5"
            ]
        ]
    },
    {
        "id": "aab6dd993029df4b",
        "type": "mqtt in",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "topic": "/scale/plate",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "989a90dfdbfa79d0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 380,
        "wires": [
            [
                "4ca25683ea82e5cc",
                "e6daa9bc33ba25d7"
            ]
        ]
    },
    {
        "id": "e6daa9bc33ba25d7",
        "type": "debug",
        "z": "1c38bb45ab2e35d1",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 440,
        "wires": []
    },
    {
        "id": "d57b6c6c90b48677",
        "type": "ui_ui_control",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "events": "all",
        "x": 1080,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "9c09e02cc734503d",
        "type": "switch",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "success",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "failure",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 1400,
        "wires": [
            [
                "8ad9dfeea3d18d2a",
                "0a04e5f5b7b5bcb7"
            ],
            [
                "86944e7a72fc45ec"
            ]
        ]
    },
    {
        "id": "8ad9dfeea3d18d2a",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Login success",
        "func": "msg.payload = msg.payload.success\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1360,
        "wires": [
            [
                "1f5dc912882315c4"
            ]
        ]
    },
    {
        "id": "86944e7a72fc45ec",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Login failure",
        "func": "msg.payload = msg.payload.failure\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1440,
        "wires": [
            [
                "1f5dc912882315c4"
            ]
        ]
    },
    {
        "id": "1f5dc912882315c4",
        "type": "ui_toast",
        "z": "1c38bb45ab2e35d1",
        "position": "bottom right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Notification",
        "name": "",
        "x": 1110,
        "y": 1400,
        "wires": []
    },
    {
        "id": "85bfae7a3086d1de",
        "type": "inject",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 960,
        "wires": [
            [
                "7f24b7982ce194bc"
            ]
        ]
    },
    {
        "id": "7f24b7982ce194bc",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "function 12",
        "func": "msg.payload = Math.round(Math.random()*100)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 960,
        "wires": [
            [
                "77d4b99a9650796b"
            ]
        ]
    },
    {
        "id": "77d4b99a9650796b",
        "type": "http request",
        "z": "1c38bb45ab2e35d1",
        "name": "Send data to Thingspeak",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/update?api_key=XRSGUUMCOGOTT89V&field1={{payload}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 960,
        "wires": [
            [
                "3e7188dfe4d69994"
            ]
        ]
    },
    {
        "id": "3e7188dfe4d69994",
        "type": "debug",
        "z": "1c38bb45ab2e35d1",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 960,
        "wires": []
    },
    {
        "id": "f2603d666ac3eab3",
        "type": "inject",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1020,
        "wires": [
            [
                "d889ddb3646ce564"
            ]
        ]
    },
    {
        "id": "d889ddb3646ce564",
        "type": "http request",
        "z": "1c38bb45ab2e35d1",
        "name": "Get data from Thingspeak",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2372088/fields/1.json?api_key=KYAW97ZDGX7CCNPF&days=1&timezone=Asia%2FBangkok",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 310,
        "y": 1020,
        "wires": [
            [
                "71fc8f0503db5b1a"
            ]
        ]
    },
    {
        "id": "71fc8f0503db5b1a",
        "type": "json",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 1020,
        "wires": [
            [
                "2b33553528ade4c8",
                "954d7826e10e599f"
            ]
        ]
    },
    {
        "id": "7653450f6b2f35ca",
        "type": "comment",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "info": "Dữ liệu theo ngày, tuần, tháng phụ thuộc rất nhiều vào cái query của http request\nXem docs để tìm cách lấy dữ liệu\nhttps://www.mathworks.com/help/thingspeak/readfield.html",
        "x": 100,
        "y": 1060,
        "wires": []
    },
    {
        "id": "2b33553528ade4c8",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "function 13",
        "func": "const entries = msg.payload.feeds\n\nconst data = entries.map((entry) => {\n    return parseFloat(entry.field1)\n})\n\nconst labels = entries.map((entry) => {\n    return entry.created_at.substr(11,8)\n})\n\nmsg.payload = [{\n    \"series\": [\"Amount\"],\n    \"data\": [[...data]],\n    \"labels\": [...labels]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1020,
        "wires": [
            [
                "b9428d73d03be004"
            ]
        ]
    },
    {
        "id": "b9428d73d03be004",
        "type": "ui_chart",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "group": "36a7cc5a3406a57d",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "d1ce92c6462e2942",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Check percentage for notification",
        "func": "const old_percentage = flow.get(\"container_remain_percentage\")\n\nconst new_percentage = msg.payload.percentage\n\n// If the amount of food drops\nif(new_percentage < old_percentage){\n    if(new_percentage <= 50){\n        if(flow.get(\"noti_50\") === false){\n            msg.payload = {\n                notif: \"Your food container is below 50%\"\n            }\n            flow.set(\"noti_50\", true)\n        }\n    }\n    if (new_percentage <= 20) {\n        if(flow.get(\"noti_20\") === false){\n            msg.payload = {\n                notif: \"Your food container is below 20%\"\n            }\n            flow.set(\"noti_20\", true)\n        }\n    }\n    if (new_percentage == 0) {\n        if(flow.get(\"noti_0\") === false){\n            msg.payload = {\n                notif: \"Your food container is empty, go back and fill it!!!\"\n            }\n            flow.set(\"noti_0\", true)\n        }\n    }\n}\nelse{\n    if(new_percentage > 0){\n        if(flow.get(\"noti_0\") === true){\n            flow.set(\"noti_0\", false)\n        }\n    }\n    if(new_percentage > 20){\n        if(flow.get(\"noti_20\") === true){\n            flow.set(\"noti_20\", false)\n        }\n    }\n    if(new_percentage > 50){\n        if(flow.get(\"noti_50\") === true){\n            flow.set(\"noti_50\", false)\n        }\n    }\n}\n\nflow.set(\"container_remain_percentage\", new_percentage)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 40,
        "wires": [
            [
                "3feb7889bc82308f"
            ]
        ]
    },
    {
        "id": "3feb7889bc82308f",
        "type": "switch",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "notif",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 890,
        "y": 40,
        "wires": [
            [
                "16fa34c9ea98a2b4",
                "5bdc7c99f9de46c1"
            ]
        ]
    },
    {
        "id": "16fa34c9ea98a2b4",
        "type": "debug",
        "z": "1c38bb45ab2e35d1",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 100,
        "wires": []
    },
    {
        "id": "c469b3fc36d4f852",
        "type": "http request",
        "z": "1c38bb45ab2e35d1",
        "name": "Send notification",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "https://maker.ifttt.com/trigger/food_container/with/key/p2uFc04S-wZa--ullRaUbLBoZWcztXBX7qcMNV5fn__",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1370,
        "y": 40,
        "wires": [
            [
                "8d348ce2b23a9576"
            ]
        ]
    },
    {
        "id": "8d348ce2b23a9576",
        "type": "debug",
        "z": "1c38bb45ab2e35d1",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 40,
        "wires": []
    },
    {
        "id": "5bdc7c99f9de46c1",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Parse notif into value1 for IFTTT",
        "func": "msg.payload = {\n    \"value1\": msg.payload.notif\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 40,
        "wires": [
            [
                "c469b3fc36d4f852"
            ]
        ]
    },
    {
        "id": "314dbea53b82851f",
        "type": "inject",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 900,
        "wires": [
            [
                "22ae7ee2e0ec33b4"
            ]
        ]
    },
    {
        "id": "22ae7ee2e0ec33b4",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "function 14",
        "func": "msg.payload = {\n    \"test1\": \"abc\",\n    \"test2\": 123,\n    \"test3\": [1, 2, 3]\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 900,
        "wires": [
            [
                "c3f2695b59c44725"
            ]
        ]
    },
    {
        "id": "c3f2695b59c44725",
        "type": "mqtt out",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "topic": "/test/meo",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "989a90dfdbfa79d0",
        "x": 440,
        "y": 900,
        "wires": []
    },
    {
        "id": "e2d9bf1107248d25",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Prepare data to push to Thingspeak",
        "func": "msg.payload = msg.payload.percentage\nmsg.topic = \"field2\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 220,
        "wires": [
            [
                "959bb85625c29ee4"
            ]
        ]
    },
    {
        "id": "172020e9151b7b95",
        "type": "http request",
        "z": "1c38bb45ab2e35d1",
        "name": "Get data from Thingspeak",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2372088/feeds.json?api_key=KYAW97ZDGX7CCNPF&days=1&timezone=Asia%2FBangkok",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1270,
        "y": 280,
        "wires": [
            [
                "f330a55508151194"
            ]
        ]
    },
    {
        "id": "f330a55508151194",
        "type": "json",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1470,
        "y": 280,
        "wires": [
            [
                "30ba7b622d2aa610",
                "ec7563823faf3626",
                "9f25383364393433",
                "98860592e09ace01"
            ]
        ]
    },
    {
        "id": "ec7563823faf3626",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Parse data",
        "func": "const entries = msg.payload.feeds\n\nconst data = entries.map((entry) => {\n    return parseFloat(entry.field2)\n})\n\nconst labels = entries.map((entry) => {\n    return entry.created_at.substr(11,8)\n})\n\nmsg.payload = [{\n    \"series\": [\"Amount\"],\n    \"data\": [[...data]],\n    \"labels\": [...labels]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 220,
        "wires": [
            [
                "20e2ceb920b91a4b"
            ]
        ]
    },
    {
        "id": "20e2ceb920b91a4b",
        "type": "ui_chart",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "group": "2d66c14763805337",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Food Container",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "monotone",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1840,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "49d53ceebd9ca4c1",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Prepare plate's percentage to push to Thingspeak",
        "func": "msg.payload = msg.payload.percentage\nmsg.topic = \"field3\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 460,
        "wires": [
            [
                "959bb85625c29ee4"
            ]
        ]
    },
    {
        "id": "9f25383364393433",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Parse data",
        "func": "const entries = msg.payload.feeds\n\nconst data = entries.map((entry) => {\n    return parseFloat(entry.field3)\n})\n\nconst labels = entries.map((entry) => {\n    return entry.created_at.substr(11,8)\n})\n\nmsg.payload = [{\n    \"series\": [\"Amount\"],\n    \"data\": [[...data]],\n    \"labels\": [...labels]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 280,
        "wires": [
            [
                "f4e0861ce237129e"
            ]
        ]
    },
    {
        "id": "f4e0861ce237129e",
        "type": "ui_chart",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "group": "2d66c14763805337",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Food Plate",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "monotone",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1830,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "ab9630d548df2c2c",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Prepare pet's eaten amount to send to Thingspeak",
        "func": "const old_plate_remain = flow.get(\"plate_remain\")\n\nconst current_plate_remain = msg.payload.num\n\nif(current_plate_remain < old_plate_remain){\n    msg.payload = old_plate_remain - current_plate_remain\n}\nelse{\n    msg.payload = 0\n}\nmsg.topic = \"field4\"\n\nflow.set(\"plate_remain\", current_plate_remain)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 580,
        "wires": [
            [
                "959bb85625c29ee4"
            ]
        ]
    },
    {
        "id": "98860592e09ace01",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Parse data",
        "func": "const entries = msg.payload.feeds\n\nconst data = entries.map((entry) => {\n    if (!isNaN(parseFloat(entry.field4))){\n        return parseFloat(entry.field4)\n    }\n    else{\n        return 0\n    }\n})\n\nconst labels = entries.map((entry) => {\n    return entry.created_at.substr(11,8)\n})\n\nmsg.payload = [{\n    \"series\": [\"Amount\"],\n    \"data\": [[...data]],\n    \"labels\": [...labels]\n}]\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 340,
        "wires": [
            [
                "0df1919e8f729947"
            ]
        ]
    },
    {
        "id": "0df1919e8f729947",
        "type": "ui_chart",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "group": "2d66c14763805337",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Eaten Amount",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1840,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "8beeac5d7991808e",
        "type": "http request",
        "z": "1c38bb45ab2e35d1",
        "name": "Send data to Thingspeak",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/update?api_key=XRSGUUMCOGOTT89V",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1410,
        "y": 460,
        "wires": [
            [
                "c25b9f4374317dfd"
            ]
        ]
    },
    {
        "id": "c25b9f4374317dfd",
        "type": "debug",
        "z": "1c38bb45ab2e35d1",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 460,
        "wires": []
    },
    {
        "id": "959bb85625c29ee4",
        "type": "join",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1050,
        "y": 460,
        "wires": [
            [
                "a152368cdf2d8707"
            ]
        ]
    },
    {
        "id": "a152368cdf2d8707",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Filter",
        "func": "if (msg.payload.field4 === 0){\n    delete msg.payload.field4;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 460,
        "wires": [
            [
                "33d77b7fe8b09544",
                "8beeac5d7991808e"
            ]
        ]
    },
    {
        "id": "33d77b7fe8b09544",
        "type": "debug",
        "z": "1c38bb45ab2e35d1",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 520,
        "wires": []
    },
    {
        "id": "954d7826e10e599f",
        "type": "debug",
        "z": "1c38bb45ab2e35d1",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 1080,
        "wires": []
    },
    {
        "id": "72f9406693b0133b",
        "type": "inject",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1070,
        "y": 280,
        "wires": [
            [
                "172020e9151b7b95",
                "aad275f54b8f9af1"
            ]
        ]
    },
    {
        "id": "30ba7b622d2aa610",
        "type": "debug",
        "z": "1c38bb45ab2e35d1",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 160,
        "wires": []
    },
    {
        "id": "70bbb362f7ce005c",
        "type": "firebase-get",
        "z": "1c38bb45ab2e35d1",
        "name": "Search account",
        "constraint": {
            "orderByChild": "username",
            "equalTo": {
                "value": "payload.username",
                "type": "msg"
            }
        },
        "database": "72efe316941c7cdb",
        "outputType": "auto",
        "passThrough": false,
        "path": "accounts",
        "pathType": "str",
        "useConstraint": true,
        "x": 280,
        "y": 1340,
        "wires": [
            [
                "a75e9b6a12759ad0"
            ]
        ]
    },
    {
        "id": "a75e9b6a12759ad0",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Check for account's existence",
        "func": "const data = msg.payload\n\nif(data === null){\n    msg.payload = \"Wrong account/password\"\n    msg.topic = \"failure\"\n}\n\nfor (const key in data){\n    if(data.hasOwnProperty(key)){\n        msg.payload = data[key].password\n        msg.topic = \"get_password\"\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1400,
        "wires": [
            [
                "de22f006a567e27c"
            ]
        ]
    },
    {
        "id": "de22f006a567e27c",
        "type": "join",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 290,
        "y": 1460,
        "wires": [
            [
                "89d6756ca698fd04"
            ]
        ]
    },
    {
        "id": "89d6756ca698fd04",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Check password",
        "func": "const data = msg.payload\n\nif(data.hasOwnProperty(\"failure\")){\n    msg.payload = {\n        failure: \"Wrong account/password\"\n    }\n}\nelse{\n    if(data.user.password === data.get_password){\n        msg.payload = {\n        success: \"Login completed\"\n        }\n    }\n    else{\n        msg.payload = {\n            failure: \"Wrong account/password\"\n        }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1460,
        "wires": [
            [
                "9c09e02cc734503d"
            ]
        ]
    },
    {
        "id": "0a04e5f5b7b5bcb7",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Login complete",
        "func": "msg.payload = {\n    \"tabs\": {\n        \"show\": [\"Home\", \"Statistics\"],\n        \"hide\": [\"Login\", \"Register\"]\n    },\n    \"tab\": \"Home\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1300,
        "wires": [
            [
                "d57b6c6c90b48677"
            ]
        ]
    },
    {
        "id": "93d9cc1f4c860f6e",
        "type": "ui_form",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "label": "",
        "group": "3e45edafd7d05920",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": ""
        },
        "payload": "",
        "submit": "Register",
        "cancel": "",
        "topic": "user",
        "topicType": "str",
        "splitLayout": "",
        "className": "",
        "x": 90,
        "y": 1540,
        "wires": [
            [
                "93969bb7c93d2a3a",
                "e70156c969c3b28a"
            ]
        ]
    },
    {
        "id": "a951727cfb55fbdd",
        "type": "firebase-out",
        "z": "1c38bb45ab2e35d1",
        "name": "Add account",
        "database": "72efe316941c7cdb",
        "path": "accounts",
        "pathType": "str",
        "priority": 1,
        "queryType": "push",
        "x": 910,
        "y": 1760,
        "wires": []
    },
    {
        "id": "93969bb7c93d2a3a",
        "type": "firebase-get",
        "z": "1c38bb45ab2e35d1",
        "name": "Search account",
        "constraint": {
            "orderByChild": "username",
            "equalTo": {
                "value": "payload.username",
                "type": "msg"
            }
        },
        "database": "72efe316941c7cdb",
        "outputType": "auto",
        "passThrough": false,
        "path": "accounts",
        "pathType": "str",
        "useConstraint": true,
        "x": 260,
        "y": 1540,
        "wires": [
            [
                "2f9a30c5a5c4b7e9"
            ]
        ]
    },
    {
        "id": "2f9a30c5a5c4b7e9",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Check username duplication",
        "func": "const data = msg.payload;\n\nif(data !== null){\n    msg.payload = \"Account has already existed\"\n    msg.topic = \"failure\"\n}\nelse{\n    msg.payload = \"Successfully created an account\"\n    msg.topic = \"success\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1540,
        "wires": [
            [
                "e70156c969c3b28a"
            ]
        ]
    },
    {
        "id": "e70156c969c3b28a",
        "type": "join",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 290,
        "y": 1600,
        "wires": [
            [
                "887cada142bd6846"
            ]
        ]
    },
    {
        "id": "887cada142bd6846",
        "type": "switch",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "failure",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "success",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 1600,
        "wires": [
            [
                "988a8c5e9c106922"
            ],
            [
                "9511f4fa4ab089f7",
                "096d213e3aabde31",
                "294f0a27e98750c8"
            ]
        ]
    },
    {
        "id": "9511f4fa4ab089f7",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Get input account",
        "func": "msg.payload = msg.payload.user\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1760,
        "wires": [
            [
                "a951727cfb55fbdd"
            ]
        ]
    },
    {
        "id": "096d213e3aabde31",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Create account success message",
        "func": "msg.payload = msg.payload.success\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1640,
        "wires": [
            [
                "1f5dc912882315c4"
            ]
        ]
    },
    {
        "id": "988a8c5e9c106922",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Create account failure message",
        "func": "msg.payload = msg.payload.failure\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1580,
        "wires": [
            [
                "1f5dc912882315c4"
            ]
        ]
    },
    {
        "id": "294f0a27e98750c8",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Navigate to Login",
        "func": "msg.payload = {\n    \"tab\": \"Login\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1700,
        "wires": [
            [
                "09e7c19144b0faa2"
            ]
        ]
    },
    {
        "id": "09e7c19144b0faa2",
        "type": "ui_ui_control",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "events": "all",
        "x": 1080,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "b5e223ce52159cf4",
        "type": "comment",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "info": "Cứ 30s lấy data 1 lần",
        "x": 1040,
        "y": 240,
        "wires": []
    },
    {
        "id": "71c7d0d112fb9fd8",
        "type": "comment",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "info": "Gửi dữ liệu từ ESP qua đây bằng MQTT nên\ndelay cỡ 15-20s do Thingspeak hàng free\nkhông cho push data nhanh",
        "x": 100,
        "y": 100,
        "wires": []
    },
    {
        "id": "aad275f54b8f9af1",
        "type": "http request",
        "z": "1c38bb45ab2e35d1",
        "name": "Get eaten amount in a day",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.thingspeak.com/channels/2372088/fields/4.json?api_key=KYAW97ZDGX7CCNPF&days=1&timezone=Asia%2FBangkok&sum=daily",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1280,
        "y": 400,
        "wires": [
            [
                "b9f2e509d46beb6b"
            ]
        ]
    },
    {
        "id": "b9f2e509d46beb6b",
        "type": "json",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1490,
        "y": 400,
        "wires": [
            [
                "36cd4545052b816d"
            ]
        ]
    },
    {
        "id": "36cd4545052b816d",
        "type": "function",
        "z": "1c38bb45ab2e35d1",
        "name": "Parse data",
        "func": "const entries = msg.payload.feeds\n\nmsg.payload = entries[entries.length -1].field4\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 400,
        "wires": [
            [
                "a60863c544de65e6"
            ]
        ]
    },
    {
        "id": "13c98c77aedc44e5",
        "type": "comment",
        "z": "1c38bb45ab2e35d1",
        "name": "",
        "info": "Login với Register dùng firebase, không\nhash password",
        "x": 100,
        "y": 1280,
        "wires": []
    }
]